/**
 * LIFF SDK Loader - ‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏´‡∏•‡∏î LIFF SDK ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á error ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
 * Version 2.0 - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö layout preload
 */

interface LiffLoadResult {
  success: boolean;
  error?: string;
  retry?: boolean;
}

interface LiffInitResult {
  success: boolean;
  error?: string;
  alreadyInitialized?: boolean;
}

// Global state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° loading status
let liffLoadingPromise: Promise<LiffLoadResult> | null = null;
let liffSDKLoaded = false;
let liffInitialized = false;

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LIFF SDK ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
export const isLiffSDKAvailable = (): boolean => {
  return typeof window !== 'undefined' && !!window.liff && liffSDKLoaded;
};

/**
 * ‡∏£‡∏≠‡πÉ‡∏´‡πâ LIFF SDK ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å layout ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏á
 */
export const ensureLiffSDKLoaded = async (maxRetries: number = 3): Promise<LiffLoadResult> => {
  // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ return ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  if (liffSDKLoaded && isLiffSDKAvailable()) {
    return { success: true };
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ LIFF SDK ‡πÉ‡∏ô window ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏à‡∏≤‡∏Å layout)
  if (typeof window !== 'undefined' && window.liff) {
    console.log('‚úÖ LIFF SDK already available from layout');
    liffSDKLoaded = true;
    return { success: true };
  }

  // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏£‡∏≠ Promise ‡πÄ‡∏î‡∏¥‡∏°
  if (liffLoadingPromise) {
    return await liffLoadingPromise;
  }

      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ layout ‡πÇ‡∏´‡∏•‡∏î SDK ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô (‡∏£‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‡πÅ‡∏ö‡∏ö parallel
    const layoutPromise = waitForLayoutLiffSDK(3000);
    const manualPromise = new Promise<LiffLoadResult>((resolve) => {
      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î manual ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ñ‡πâ‡∏≤ layout ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
      setTimeout(async () => {
        console.log('üîÑ Starting parallel manual LIFF loading...');
        const result = await loadLiffSDKWithRetry(maxRetries);
        resolve(result);
      }, 1000);
    });
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ Promise ‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô (parallel loading)
    liffLoadingPromise = Promise.race([layoutPromise, manualPromise]);
    
    try {
      const result = await liffLoadingPromise;
      if (result.success) {
        liffSDKLoaded = true;
        return result;
      }
      
      // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      console.log('üîÑ Both layout and manual loading failed, final retry...');
      const finalRetry = await loadLiffSDKWithRetry(1);
      if (finalRetry.success) {
        liffSDKLoaded = true;
      }
      return finalRetry;
    } finally {
      // ‡∏•‡πâ‡∏≤‡∏á Promise ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
      liffLoadingPromise = null;
    }
};

/**
 * ‡∏£‡∏≠‡πÉ‡∏´‡πâ layout ‡πÇ‡∏´‡∏•‡∏î LIFF SDK ‡πÄ‡∏™‡∏£‡πá‡∏à - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
 */
const waitForLayoutLiffSDK = async (timeout: number = 3000): Promise<LiffLoadResult> => {
  return new Promise((resolve) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ SDK ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (typeof window !== 'undefined' && window.liff) {
      console.log('‚úÖ LIFF SDK already loaded by layout');
      resolve({ success: true });
      return;
    }

    let resolved = false;
    
    // Listen for SDK load success
    const handleSuccess = () => {
      if (!resolved) {
        resolved = true;
        console.log('‚úÖ LIFF SDK loaded by layout successfully');
        window.removeEventListener('liffSDKLoaded', handleSuccess);
        window.removeEventListener('liffSDKError', handleError);
        resolve({ success: true });
      }
    };

    // Listen for SDK load error
    const handleError = () => {
      if (!resolved) {
        resolved = true;
        console.warn('‚ö†Ô∏è LIFF SDK loading by layout failed');
        window.removeEventListener('liffSDKLoaded', handleSuccess);
        window.removeEventListener('liffSDKError', handleError);
        resolve({ success: false, error: 'Layout LIFF load failed', retry: true });
      }
    };

    window.addEventListener('liffSDKLoaded', handleSuccess);
    window.addEventListener('liffSDKError', handleError);

    // ‡∏•‡∏î timeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    setTimeout(() => {
      if (!resolved) {
        resolved = true;
        console.warn('‚ö†Ô∏è LIFF SDK layout load timeout (3s)');
        window.removeEventListener('liffSDKLoaded', handleSuccess);
        window.removeEventListener('liffSDKError', handleError);
        resolve({ success: false, error: 'Layout LIFF load timeout', retry: true });
      }
    }, timeout);
  });
};

/**
 * ‡πÇ‡∏´‡∏•‡∏î LIFF SDK ‡∏û‡∏£‡πâ‡∏≠‡∏° retry mechanism (fallback method)
 */
const loadLiffSDKWithRetry = async (maxRetries: number): Promise<LiffLoadResult> => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ SDK ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (typeof window !== 'undefined' && window.liff) {
    console.log('‚úÖ LIFF SDK already available');
    liffSDKLoaded = true;
    return { success: true };
  }

  console.log('üì¶ Loading LIFF SDK manually...');

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      await loadLiffScript();
      
      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ SDK ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      await waitForLiffReady(5000); // ‡∏£‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      
      if (isLiffSDKAvailable()) {
        console.log('‚úÖ LIFF SDK loaded successfully');
        liffSDKLoaded = true;
        return { success: true };
      } else {
        throw new Error('LIFF SDK not available after loading');
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è LIFF SDK loading attempt ${attempt}/${maxRetries} failed:`, error);
      
      if (attempt === maxRetries) {
        console.error('‚ùå All LIFF SDK loading attempts failed');
        return { 
          success: false, 
          error: 'Failed to load LIFF SDK after all retry attempts',
          retry: false 
        };
      }
      
      // ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà (progressive backoff)
      await new Promise(resolve => setTimeout(resolve, attempt * 1000));
    }
  }

  return { 
    success: false, 
    error: 'Maximum retry attempts exceeded',
    retry: false 
  };
};

/**
 * ‡πÇ‡∏´‡∏•‡∏î LIFF script ‡∏à‡∏≤‡∏Å CDN
 */
const loadLiffScript = (): Promise<void> => {
  return new Promise((resolve, reject) => {
    // ‡∏•‡∏ö script ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const existingScripts = document.querySelectorAll('script[src*="liff/edge"], script[data-liff-sdk]');
    existingScripts.forEach(script => script.remove());

    const script = document.createElement('script');
    script.src = 'https://static.line-scdn.net/liff/edge/2/sdk.js';
    script.async = true;
    script.crossOrigin = 'anonymous';
    script.dataset.liffSdk = 'manual';
    
    script.onload = () => {
      console.log('üì¶ LIFF script loaded manually');
      resolve();
    };
    
    script.onerror = (error) => {
      console.error('‚ùå LIFF script loading failed:', error);
      
      // ‡∏•‡∏≠‡∏á backup URL
      const backupScript = document.createElement('script');
      backupScript.src = 'https://static.line-scdn.net/liff/edge/versions/2.22.3/sdk.js';
      backupScript.async = true;
      backupScript.crossOrigin = 'anonymous';
      backupScript.dataset.liffSdk = 'manual-backup';
      
      backupScript.onload = () => {
        console.log('üì¶ LIFF backup script loaded');
        resolve();
      };
      
      backupScript.onerror = () => {
        reject(new Error('Failed to load LIFF script from both primary and backup CDN'));
      };
      
      document.head.appendChild(backupScript);
    };
    
    document.head.appendChild(script);
  });
};

/**
 * ‡∏£‡∏≠‡πÉ‡∏´‡πâ LIFF SDK ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 */
const waitForLiffReady = (timeout: number = 10000): Promise<void> => {
  return new Promise((resolve, reject) => {
    const startTime = Date.now();
    
    const checkReady = () => {
      if (typeof window !== 'undefined' && window.liff) {
        console.log('‚úÖ LIFF SDK ready');
        resolve();
        return;
      }
      
      if (Date.now() - startTime > timeout) {
        reject(new Error('LIFF SDK ready timeout'));
        return;
      }
      
      setTimeout(checkReady, 100);
    };
    
    checkReady();
  });
};

/**
 * Initialize LIFF ‡πÅ‡∏ö‡∏ö Smart Init ‡∏û‡∏£‡πâ‡∏≠‡∏° error handling ‡∏ó‡∏µ‡πà‡∏î‡∏µ
 */
export const smartInitializeLiff = async (liffId: string, maxRetries: number = 3): Promise<LiffInitResult> => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ SDK ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!isLiffSDKAvailable()) {
    const loadResult = await ensureLiffSDKLoaded();
    if (!loadResult.success) {
      return { 
        success: false, 
        error: loadResult.error || 'LIFF SDK not available' 
      };
    }
  }

  // ‡∏ñ‡πâ‡∏≤ initialize ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ return ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  if (liffInitialized) {
    try {
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      window.liff.isLoggedIn();
      console.log('‚úÖ LIFF already initialized and working');
      return { success: true, alreadyInitialized: true };
    } catch (error) {
      console.warn('‚ö†Ô∏è LIFF object exists but not working, re-initializing...');
      liffInitialized = false;
    }
  }

  console.log('üöÄ Initializing LIFF with ID:', liffId);

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      await window.liff.init({ liffId });
      console.log('‚úÖ LIFF initialized successfully');
      liffInitialized = true;
      return { success: true };
    } catch (error) {
      console.warn(`‚ö†Ô∏è LIFF init attempt ${attempt}/${maxRetries}:`, error);
      
      if (error instanceof Error) {
        // Already initialized - ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if (error.message.includes('already initialized') || 
            error.message.includes('LIFF has already been initialized')) {
          console.log('‚úÖ LIFF already initialized');
          liffInitialized = true;
          return { success: true, alreadyInitialized: true };
        }

        // Invalid LIFF ID - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á retry
        if (error.message.includes('invalid liff id') || 
            error.message.includes('Invalid LIFF ID')) {
          return { 
            success: false, 
            error: `Invalid LIFF ID: ${liffId}. Please check your LIFF configuration.` 
          };
        }

        // Network errors - ‡∏•‡∏≠‡∏á retry
        if (error.message.includes('timeout') || 
            error.message.includes('network') ||
            error.message.includes('failed to fetch')) {
          if (attempt === maxRetries) {
            return { 
              success: false, 
              error: 'Network error: Unable to connect to LINE servers. Please check your internet connection.' 
            };
          }
          // ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          await new Promise(resolve => setTimeout(resolve, attempt * 1000));
          continue;
        }
      }
      
      if (attempt === maxRetries) {
        return { 
          success: false, 
          error: error instanceof Error ? error.message : 'Unknown LIFF initialization error' 
        };
      }
      
      // ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
      await new Promise(resolve => setTimeout(resolve, attempt * 500));
    }
  }

  return { success: false, error: 'Failed to initialize LIFF after all retry attempts' };
};

/**
 * ‡∏£‡∏∞‡∏ö‡∏ö Graceful LIFF Loading - ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á error ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
 */
export const gracefulLiffOperation = async <T>(
  operation: () => Promise<T>,
  fallback: () => T,
  options: {
    silent?: boolean;
    retryCount?: number;
    operationName?: string;
  } = {}
): Promise<T> => {
  const { silent = true, retryCount = 2, operationName = 'LIFF operation' } = options;

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î LIFF SDK
    const loadResult = await ensureLiffSDKLoaded();
    if (!loadResult.success) {
      if (!silent) {
        console.warn(`‚ö†Ô∏è ${operationName}: LIFF SDK not available, using fallback`);
      }
      return fallback();
    }

    // ‡∏•‡∏≠‡∏á‡∏ó‡∏≥ operation
    for (let attempt = 1; attempt <= retryCount; attempt++) {
      try {
        return await operation();
      } catch (error) {
        if (attempt === retryCount) {
          if (!silent) {
            console.warn(`‚ö†Ô∏è ${operationName}: All attempts failed, using fallback:`, error);
          }
          return fallback();
        }
        
        if (!silent) {
          console.warn(`‚ö†Ô∏è ${operationName}: Attempt ${attempt} failed, retrying...`, error);
        }
        
        await new Promise(resolve => setTimeout(resolve, attempt * 500));
      }
    }

    return fallback();
  } catch (error) {
    if (!silent) {
      console.warn(`‚ö†Ô∏è ${operationName}: Unexpected error, using fallback:`, error);
    }
    return fallback();
  }
};

/**
 * Reset LIFF state (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö testing ‡∏´‡∏£‡∏∑‡∏≠ recovery)
 */
export const resetLiffState = () => {
  liffSDKLoaded = false;
  liffInitialized = false;
  liffLoadingPromise = null;
  
  // ‡∏•‡∏ö LIFF object ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å window (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  if (typeof window !== 'undefined' && window.liff) {
    try {
      delete (window as any).liff;
    } catch (error) {
      console.warn('‚ö†Ô∏è Could not delete LIFF object:', error);
    }
  }
  
  console.log('üîÑ LIFF state reset');
}; 