import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '../../auth/[...nextauth]/route'
import { prisma } from '@/lib/prisma'
import { deleteImageFromFileSystem } from '@/lib/deleteImage'

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)

    if (!session?.user?.id) {
      return NextResponse.json(
        { message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' },
        { status: 401 }
      )
    }

    if (session.user.role !== 'RESTAURANT_OWNER') {
      return NextResponse.json(
        { message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ' },
        { status: 403 }
      )
    }

    const restaurant = await prisma.restaurant.findUnique({
      where: {
        ownerId: session.user.id
      },
      include: {
        documents: {
          select: {
            id: true,
            fileName: true,
            fileUrl: true,
            fileSize: true,
            mimeType: true,
            documentType: true,
            description: true
          }
        },
        _count: {
          select: {
            categories: true,
            menuItems: true,
            orders: true
          }
        }
      } as any
    })

    if (!restaurant) {
      return NextResponse.json(
        { message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£' },
        { status: 404 }
      )
    }

    return NextResponse.json(restaurant)

  } catch (error) {
    console.error('Error fetching restaurant:', error)
    return NextResponse.json(
      { message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô' },
      { status: 500 }
    )
  }
}

export async function PUT(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)

    if (!session?.user?.id) {
      return NextResponse.json(
        { message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' },
        { status: 401 }
      )
    }

    if (session.user.role !== 'RESTAURANT_OWNER') {
      return NextResponse.json(
        { message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ' },
        { status: 403 }
      )
    }

    const data = await request.json()
    const {
      name,
      description,
      address,
      phone,
      email,
      imageUrl,
      latitude,
      longitude,
      locationName,
      businessType,
      taxId,
      bankAccount,
      bankName,
      openTime,
      closeTime,
      isOpen,
      minOrderAmount,
      deliveryFee,
      deliveryRadius
    } = data

    // Validation
    if (!name?.trim()) {
      return NextResponse.json(
        { message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô' },
        { status: 400 }
      )
    }

    if (!address?.trim()) {
      return NextResponse.json(
        { message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô' },
        { status: 400 }
      )
    }

    if (!phone?.trim()) {
      return NextResponse.json(
        { message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå' },
        { status: 400 }
      )
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡πà‡∏≤
    const existingRestaurant = await prisma.restaurant.findUnique({
      where: {
        ownerId: session.user.id
      },
      select: {
        imageUrl: true
      }
    })

    if (!existingRestaurant) {
      return NextResponse.json(
        { message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô' },
        { status: 404 }
      )
    }

    // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
    if (imageUrl && existingRestaurant.imageUrl && existingRestaurant.imageUrl !== imageUrl) {
      try {
        await deleteImageFromFileSystem(existingRestaurant.imageUrl)
        console.log(`üóëÔ∏è Deleted old restaurant image: ${existingRestaurant.imageUrl}`)
      } catch (deleteError) {
        console.warn('‚ö†Ô∏è Could not delete old restaurant image:', deleteError)
        // ‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      }
    }

    const restaurant = await prisma.restaurant.update({
      where: {
        ownerId: session.user.id
      },
      data: {
        name: name.trim(),
        description: description?.trim() || null,
        address: address.trim(),
        phone: phone.trim(),
        email: email?.trim() || null,
        imageUrl: imageUrl?.trim() || null,
        latitude: latitude !== undefined ? latitude : null,
        longitude: longitude !== undefined ? longitude : null,
        locationName: locationName?.trim() || null,
        businessType: businessType?.trim() || null,
        taxId: taxId?.trim() || null,
        bankAccount: bankAccount?.trim() || null,
        bankName: bankName?.trim() || null,
        openTime: openTime || null,
        closeTime: closeTime || null,
        isOpen: isOpen !== undefined ? isOpen : true,
        minOrderAmount: minOrderAmount !== undefined ? minOrderAmount : null,
        deliveryFee: deliveryFee !== undefined ? deliveryFee : null,
        deliveryRadius: deliveryRadius !== undefined ? deliveryRadius : null
      } as any,
      include: {
        _count: {
          select: {
            categories: true,
            menuItems: true,
            orders: true
          }
        }
      }
    })

    return NextResponse.json(restaurant)

  } catch (error) {
    console.error('Error updating restaurant:', error)
    return NextResponse.json(
      { message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô' },
      { status: 500 }
    )
  }
} 