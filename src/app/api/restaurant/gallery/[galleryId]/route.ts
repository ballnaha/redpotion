import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '../../../auth/[...nextauth]/route'
import { prisma } from '@/lib/prisma'
import { deleteImageFromFileSystem } from '@/lib/deleteImage'

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ galleryId: string }> }
) {
  try {
    const session = await getServerSession(authOptions)

    if (!session?.user?.id) {
      return NextResponse.json(
        { message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' },
        { status: 401 }
      )
    }

    if (session.user.role !== 'RESTAURANT_OWNER') {
      return NextResponse.json(
        { message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ' },
        { status: 403 }
      )
    }

    const resolvedParams = await params
    const { galleryId } = resolvedParams

    const restaurant = await prisma.restaurant.findUnique({
      where: {
        ownerId: session.user.id
      },
      select: {
        id: true
      }
    })

    if (!restaurant) {
      return NextResponse.json(
        { message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£' },
        { status: 404 }
      )
    }

    const data = await request.json()
    const { title, description, imageUrl, isActive, sortOrder } = data

    const gallery = await (prisma as any).gallery.update({
      where: {
        id: galleryId,
        restaurantId: restaurant.id
      },
      data: {
        title: title?.trim() || null,
        description: description?.trim() || null,
        imageUrl: imageUrl?.trim(),
        isActive,
        sortOrder
      }
    })

    return NextResponse.json(gallery)

  } catch (error) {
    console.error('Error updating gallery:', error)
    return NextResponse.json(
      { message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà' },
      { status: 500 }
    )
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ galleryId: string }> }
) {
  try {
    const session = await getServerSession(authOptions)

    if (!session?.user?.id) {
      return NextResponse.json(
        { message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' },
        { status: 401 }
      )
    }

    if (session.user.role !== 'RESTAURANT_OWNER') {
      return NextResponse.json(
        { message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ' },
        { status: 403 }
      )
    }

    const resolvedParams = await params
    const { galleryId } = resolvedParams

    const restaurant = await prisma.restaurant.findUnique({
      where: {
        ownerId: session.user.id
      },
      select: {
        id: true
      }
    })

    if (!restaurant) {
      return NextResponse.json(
        { message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£' },
        { status: 404 }
      )
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    const gallery = await (prisma as any).gallery.findUnique({
      where: {
        id: galleryId,
        restaurantId: restaurant.id
      }
    })

    if (!gallery) {
      return NextResponse.json(
        { message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' },
        { status: 404 }
      )
    }

    // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å file system
    if (gallery.imageUrl) {
      try {
        await deleteImageFromFileSystem(gallery.imageUrl)
        console.log(`üóëÔ∏è Deleted gallery image: ${gallery.imageUrl}`)
      } catch (deleteError) {
        console.warn('‚ö†Ô∏è Could not delete gallery image:', deleteError)
        // ‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      }
    }

    // ‡∏•‡∏ö‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await (prisma as any).gallery.delete({
      where: {
        id: galleryId,
        restaurantId: restaurant.id
      }
    })

    return NextResponse.json({ message: '‡∏•‡∏ö‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })

  } catch (error) {
    console.error('Error deleting gallery:', error)
    return NextResponse.json(
      { message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà' },
      { status: 500 }
    )
  }
} 