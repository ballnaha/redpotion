'use client'

import { useState, useEffect } from 'react'
import { signIn, getSession, useSession } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import {
  Box,
  Card,
  CardContent,
  TextField,
  Button,
  Typography,
  Alert,
  Container,
  InputAdornment,
  IconButton,
  Divider,
  Skeleton,
} from '@mui/material'
import { Visibility, VisibilityOff, Restaurant, Email, Lock } from '@mui/icons-material'
import Link from 'next/link'
import Image from 'next/image'

export default function SignInPage() {
  const [showPassword, setShowPassword] = useState(false)
  const [error, setError] = useState('')
  const [loading, setLoading] = useState(false)

  const router = useRouter()
  const { data: session, status } = useSession()

  // Sign In Form
  const [signInData, setSignInData] = useState({
    email: '',
    password: ''
  })

  // Handle URL error parameters
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const urlParams = new URLSearchParams(window.location.search)
      const urlError = urlParams.get('error')
      
      if (urlError) {
        let errorMessage = ''
        switch (urlError) {
          case 'OAuthCallback':
            errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ LINE (OAuth Callback Error)'
            break
          case 'OAuthCreateAccount':
            errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ LINE ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
            break
          case 'line':
            errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE'
            break
          default:
            errorMessage = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö: ${urlError}`
        }
        setError(errorMessage)
      }
    }
  }, [])

  // Handle redirect for already authenticated users (only if no error in URL)
  useEffect(() => {
    if (status === 'authenticated' && session?.user) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ error parameter ‡πÉ‡∏ô URL ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const urlParams = new URLSearchParams(window.location.search)
      const urlError = urlParams.get('error')
      const callbackUrl = urlParams.get('callbackUrl')
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ error ‡πÉ‡∏ô URL ‡πÉ‡∏´‡πâ redirect
      if (!urlError) {
        console.log('üîÑ User already authenticated, redirecting...', {
          role: session.user.role,
          callbackUrl: callbackUrl
        })
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ UI ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° loading
        const timer = setTimeout(async () => {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞ redirect
          if (callbackUrl && session.user.role === 'RESTAURANT_OWNER') {
            const decodedUrl = decodeURIComponent(callbackUrl)
            
            // ‡∏ñ‡πâ‡∏≤ callback ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ restaurant ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (decodedUrl.includes('/restaurant')) {
              try {
                const response = await fetch('/api/restaurant/default')
                if (!response.ok) {
                  console.log('‚ö†Ô∏è No restaurants available, redirecting to home instead')
                  window.location.href = '/'
                  return
                }
              } catch (error) {
                console.log('‚ö†Ô∏è Error checking restaurants, redirecting to home')
                window.location.href = '/'
                return
              }
            }
            
            console.log('üîÑ Redirecting to callbackUrl:', decodedUrl)
            window.location.href = decodedUrl
            return
          }
          
          // ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πà‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏´‡πâ redirect ‡∏ï‡∏≤‡∏° role ‡∏õ‡∏Å‡∏ï‡∏¥
          if (session.user.role === 'RESTAURANT_OWNER') {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô
            try {
              const response = await fetch('/api/restaurant/default')
              if (response.ok) {
                window.location.href = '/restaurant'
              } else {
                console.log('‚ö†Ô∏è No restaurants available for restaurant owner, redirecting to home')
                window.location.href = '/'
              }
            } catch (error) {
              console.log('‚ö†Ô∏è Error checking restaurants, redirecting to home')
              window.location.href = '/'
            }
          } else if (session.user.role === 'ADMIN') {
            window.location.href = '/admin'
          } else if (session.user.role === 'USER') {
            window.location.href = '/auth/role-selection'
          } else {
            window.location.href = '/'
          }
        }, 1500)
        
        return () => clearTimeout(timer)
      }
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ signin ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á error message
    }
  }, [status, session, router])

  // Show loading skeleton while checking authentication
  if (status === 'loading') {
    return (
      <Container maxWidth="sm">
        <Box sx={{ mt: 8, mb: 4 }}>
          <Card>
            <CardContent sx={{ p: 4 }}>
              <Skeleton variant="rectangular" width="100%" height={100} sx={{ mb: 3 }} />
              <Skeleton variant="text" width="60%" height={40} sx={{ mb: 2 }} />
              <Skeleton variant="text" width="40%" height={60} sx={{ mb: 3 }} />
              <Skeleton variant="rectangular" width="100%" height={56} sx={{ mb: 2 }} />
              <Skeleton variant="rectangular" width="100%" height={56} sx={{ mb: 3 }} />
              <Skeleton variant="rectangular" width="100%" height={48} />
            </CardContent>
          </Card>
        </Box>
      </Container>
    )
  }

  // Don't render signin form if already authenticated (unless there's an error)
  if (status === 'authenticated') {
    const urlParams = new URLSearchParams(window.location.search)
    const urlError = urlParams.get('error')
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ error ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á loading ‡πÅ‡∏•‡∏∞ redirect
    if (!urlError) {
      return (
        <Container maxWidth="sm">
          <Box sx={{ mt: 8, mb: 4, textAlign: 'center' }}>
            <Card>
              <CardContent sx={{ p: 4 }}>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 3, justifyContent: 'center' }}>
                  <Image src="/images/logo_trim.png" alt="logo" width={150} height={100} />
                </Box>
                <Typography variant="h6" gutterBottom>
                  ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
                </Typography>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°...
                </Typography>
                <Box sx={{ mt: 3 }}>
                  <Skeleton variant="rectangular" width="100%" height={4} />
                </Box>
                
                {/* Manual override buttons */}
                <Box sx={{ mt: 3, display: 'flex', gap: 1, justifyContent: 'center' }}>
                  <Button 
                    size="small" 
                    variant="outlined" 
                    href="/"
                    sx={{ fontSize: '0.75rem' }}
                  >
                    ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                  </Button>
                  {session?.user?.role === 'RESTAURANT_OWNER' && (
                    <Button 
                      size="small" 
                      variant="outlined" 
                      href="/restaurant"
                      sx={{ fontSize: '0.75rem' }}
                    >
                      ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô
                    </Button>
                  )}
                  {session?.user?.role === 'ADMIN' && (
                    <Button 
                      size="small" 
                      variant="outlined" 
                      href="/admin"
                      sx={{ fontSize: '0.75rem' }}
                    >
                      Admin
                    </Button>
                  )}
                </Box>
              </CardContent>
            </Card>
          </Box>
        </Container>
      )
    }
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á form ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ user ‡πÄ‡∏´‡πá‡∏ô error message
  }

  const handleSignIn = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError('')

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö callbackUrl ‡∏à‡∏≤‡∏Å URL parameters
      const urlParams = new URLSearchParams(window.location.search)
      const callbackUrl = urlParams.get('callbackUrl')
      
      const result = await signIn('credentials', {
        email: signInData.email,
        password: signInData.password,
        callbackUrl: callbackUrl ? decodeURIComponent(callbackUrl) : undefined,
        redirect: false
      })

      if (result?.error) {
        setError('‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
      } else if (result?.ok) {
        // ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ redirect ‡∏ï‡∏≤‡∏° callbackUrl ‡∏´‡∏£‡∏∑‡∏≠ default
        if (callbackUrl) {
          console.log('üîÑ Login success, redirecting to callbackUrl:', decodeURIComponent(callbackUrl))
          router.replace(decodeURIComponent(callbackUrl))
        } else {
          // ‡πÉ‡∏´‡πâ useEffect ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ redirect ‡∏ï‡∏≤‡∏° role
          console.log('üîÑ Login success, letting useEffect handle redirect')
        }
      }
    } catch (error) {
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö')
    }

    setLoading(false)
  }



  return (
    <Container maxWidth="sm">
      <Box sx={{ mt: 8, mb: 4 }}>
        <Card>
          <CardContent sx={{ p: 4 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 3, justifyContent: 'center' }}>
              <Image src="/images/logo_trim.png" alt="logo" width={150} height={100} />
             
            </Box>


            <Typography variant="h6" align="center" gutterBottom sx={{ fontWeight: '400', color: 'primary.main' }}>
              ‡πÄ‡∏î‡∏≠‡∏∞ ‡πÄ‡∏£‡∏î ‡πÇ‡∏û‡∏ä‡∏±‡πà‡∏ô
            </Typography>

            <Typography variant="h5" align="center" gutterBottom sx={{ mt: 3, mb: 3 }}>
              ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
            </Typography>

            <Typography variant="body2" align="center" gutterBottom sx={{ mb: 3, color: 'text.secondary' }}>
              ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö
            </Typography>

            {error && (
              <Alert severity="error" sx={{ mt: 2, mb: 2 }}>
                {error}
                {status === 'authenticated' && (
                  <Box sx={{ mt: 2 }}>
                    <Button
                      variant="outlined"
                      size="small"
                      onClick={() => {
                        // Clear error ‡πÅ‡∏•‡∏∞ redirect ‡∏ï‡∏≤‡∏° callbackUrl ‡∏´‡∏£‡∏∑‡∏≠ role
                        const urlParams = new URLSearchParams(window.location.search)
                        const callbackUrl = urlParams.get('callbackUrl')
                        urlParams.delete('error')
                        const newUrl = window.location.pathname + (urlParams.toString() ? '?' + urlParams.toString() : '')
                        window.history.replaceState({}, '', newUrl)
                        
                        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ callbackUrl ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô restaurant owner ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏ô
                        if (callbackUrl && session?.user?.role === 'RESTAURANT_OWNER') {
                          router.replace(decodeURIComponent(callbackUrl))
                        } else if (session?.user?.role === 'RESTAURANT_OWNER') {
                          router.replace('/restaurant')
                        } else if (session?.user?.role === 'ADMIN') {
                          router.replace('/admin')
                        } else if (session?.user?.role === 'USER') {
                          router.replace('/auth/role-selection')
                        } else {
                          router.replace('/')
                        }
                      }}
                    >
                      ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                    </Button>
                  </Box>
                )}
              </Alert>
            )}

            <form onSubmit={handleSignIn}>
              <TextField
                fullWidth
                label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                type="email"
                value={signInData.email}
                onChange={(e) => setSignInData({ ...signInData, email: e.target.value })}
                required
                margin="normal"
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <Email />
                    </InputAdornment>
                  ),
                }}
              />
              <TextField
                fullWidth
                label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                type={showPassword ? 'text' : 'password'}
                value={signInData.password}
                onChange={(e) => setSignInData({ ...signInData, password: e.target.value })}
                required
                margin="normal"
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <Lock />
                    </InputAdornment>
                  ),
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        onClick={() => setShowPassword(!showPassword)}
                        edge="end"
                      >
                        {showPassword ? <VisibilityOff /> : <Visibility />}
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
              />
              <Button
                type="submit"
                fullWidth
                variant="contained"
                sx={{ mt: 3, mb: 2 }}
                disabled={loading}
              >
                {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...' : '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'}
              </Button>

              <Button
                fullWidth
                variant="text"
                href="/"
                sx={{ mb: 2 }}
              >
                ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
              </Button>
            </form>



            <Divider sx={{ my: 2 }}>
              <Typography variant="body2" color="text.secondary">
                ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô
              </Typography>
            </Divider>

            <Box sx={{ textAlign: 'center' }}>
              <Typography variant="body1" gutterBottom>
                ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ?
              </Typography>
              <Link href="/auth/register/restaurant" style={{ textDecoration: 'none' }}>
                <Button 
                  variant="outlined"
                  fullWidth
                  sx={{ mt: 1, fontWeight: '400' }}
                >
                  ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                </Button>
              </Link>

              {/* Demo Account Info */}
              <Box sx={{ mt: 3, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
                <Typography variant="caption" display="block" gutterBottom sx={{ fontWeight: 'bold' }}>
                  ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏î‡∏™‡∏≠‡∏ö:
                </Typography>
                <Typography variant="caption" display="block" sx={{ color: 'text.secondary' }}>
                  Email: owner@redpotion.com
                </Typography>
                <Typography variant="caption" display="block" sx={{ color: 'text.secondary' }}>
                  Password: password123
                </Typography>
              </Box>
              
            </Box>
          </CardContent>
        </Card>
      </Box>
    </Container>
  )
} 