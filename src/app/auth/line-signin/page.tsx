'use client'

import { useState, useEffect } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { 
  Box, 
  Card, 
  CardContent, 
  Typography, 
  Button,
  Alert,
  Container
} from '@mui/material'
import Image from 'next/image'

interface LineUser {
  id: string
  name: string
  email: string
  role: string
  image?: string
  lineUserId: string
}

export default function LineSignInPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [checkingSession, setCheckingSession] = useState(true)
  const [lineUser, setLineUser] = useState<LineUser | null>(null)

  const restaurantId = searchParams.get('restaurant')
  const isRequired = searchParams.get('required') === 'true'
  const errorType = searchParams.get('error')

  // Load LIFF SDK
  useEffect(() => {
    const loadLiffSdk = () => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ LIFF SDK ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      if (window.liff) {
        console.log('‚úÖ LIFF SDK already loaded');
        return;
      }

      // ‡πÇ‡∏´‡∏•‡∏î LIFF SDK
      const script = document.createElement('script');
      script.src = 'https://static.line-scdn.net/liff/edge/2/sdk.js';
      script.async = true;
      script.onload = () => {
        console.log('‚úÖ LIFF SDK loaded successfully');
      };
      script.onerror = () => {
        console.error('‚ùå Failed to load LIFF SDK');
      };
      document.head.appendChild(script);
    };

    loadLiffSdk();
  }, []);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE session
  useEffect(() => {
    checkLineSession()
  }, [])

  const checkLineSession = async () => {
    try {
      console.log('üîç Checking LINE session in line-signin page');
      const response = await fetch('/api/auth/line-session')
      if (response.ok) {
        const data = await response.json()
        if (data.authenticated && data.user) {
          console.log('‚úÖ LINE user already authenticated:', data.user.name)
          setLineUser(data.user)
          
          // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ user ‡πÄ‡∏´‡πá‡∏ô success state
          setTimeout(() => {
            // Redirect ‡∏ï‡∏≤‡∏° context
            if (restaurantId) {
              console.log('üè™ Redirecting to restaurant menu:', restaurantId)
              router.replace(`/menu/${restaurantId}`)
            } else {
              console.log('üè† Redirecting to home')
              router.replace('/')
            }
          }, 1000);
          return
        }
      }
      console.log('‚ÑπÔ∏è No existing LINE session, staying on signin page');
    } catch (error) {
      console.log('‚ÑπÔ∏è No existing LINE session (error):', error)
    }
    
    setCheckingSession(false)
  }

  const handleLineSignIn = async () => {
    setLoading(true)
    setError('')

    try {
      console.log('üì± Starting LINE login via LIFF...')
      
      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ LIFF SDK ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
      const waitForLiff = () => {
        return new Promise<void>((resolve, reject) => {
          if (typeof window !== 'undefined' && window.liff) {
            resolve();
            return;
          }

          let attempts = 0;
          const maxAttempts = 50; // ‡∏£‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
          const checkInterval = setInterval(() => {
            attempts++;
            if (typeof window !== 'undefined' && window.liff) {
              clearInterval(checkInterval);
              resolve();
            } else if (attempts >= maxAttempts) {
              clearInterval(checkInterval);
              reject(new Error('LIFF SDK not loaded within timeout'));
            }
          }, 100);
        });
      };

      await waitForLiff();
      
      // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• LIFF object
      console.log('üîç LIFF object available methods:', window.liff ? Object.getOwnPropertyNames(window.liff) : 'No LIFF');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô LIFF environment ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (typeof window !== 'undefined' && window.liff) {
        // Initialize LIFF ‡πÅ‡∏ö‡∏ö‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à
        console.log('üîÑ Initializing LIFF...')
        
        const liffId = process.env.NODE_ENV === 'production' 
          ? process.env.NEXT_PUBLIC_LIFF_ID_PROD 
          : process.env.NEXT_PUBLIC_LIFF_ID_DEV || '2007609360-3Z0L8Ekg';

        if (!liffId) {
          setError('LIFF ID ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö')
          setLoading(false)
          return
        }

        try {
          // ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å init ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ initialize ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
          await window.liff.init({ liffId })
          console.log('‚úÖ LIFF initialized successfully')
          
          // ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏´‡πâ LIFF ready
          await new Promise(resolve => setTimeout(resolve, 500));
          
        } catch (initError) {
          console.error('‚ùå LIFF initialization failed:', initError)
          // ‡∏ñ‡πâ‡∏≤ error ‡πÄ‡∏õ‡πá‡∏ô already initialized ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ
          if (initError instanceof Error && (
              initError.message.includes('already initialized') || 
              initError.message.includes('LIFF has already been initialized')
            )) {
            console.log('‚úÖ LIFF already initialized, continuing...')
          } else {
            setError(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE ‡πÑ‡∏î‡πâ: ${initError instanceof Error ? initError.message : 'Unknown error'}`)
            setLoading(false)
            return
          }
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ login ‡∏î‡πâ‡∏ß‡∏¢ try-catch
        let isLoggedIn = false;
        try {
          isLoggedIn = window.liff.isLoggedIn();
        } catch (loginCheckError) {
          console.error('‚ùå Error checking login status:', loginCheckError);
          setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ')
          setLoading(false)
          return
        }

        if (!isLoggedIn) {
          console.log('üîê User not logged in to LINE, redirecting to login...')
          try {
            window.liff.login()
          } catch (loginError) {
            console.error('‚ùå Error during LINE login:', loginError);
            setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö LINE ‡πÑ‡∏î‡πâ')
            setLoading(false)
          }
          return
        }

        console.log('‚úÖ User logged in to LINE, getting access token...')
        let accessToken;
        try {
          accessToken = window.liff.getAccessToken()
        } catch (tokenError) {
          console.error('‚ùå Error getting access token:', tokenError);
          setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö Access Token ‡∏à‡∏≤‡∏Å LINE ‡πÑ‡∏î‡πâ')
          setLoading(false)
          return
        }
        
        if (!accessToken) {
          setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö Access Token ‡∏à‡∏≤‡∏Å LINE ‡πÑ‡∏î‡πâ')
          setLoading(false)
          return
        }

        console.log('üîê Sending access token to server...')
        const loginResponse = await fetch('/api/auth/line-login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            accessToken,
            restaurantId
          })
        })

        const loginData = await loginResponse.json()

        if (loginResponse.ok && loginData.success) {
          console.log('‚úÖ LINE login successful:', loginData.user.name)
          setLineUser(loginData.user)
          
          // Redirect ‡∏ï‡∏≤‡∏° redirectUrl ‡∏à‡∏≤‡∏Å server
          setTimeout(() => {
            router.replace(loginData.redirectUrl)
          }, 1000)
        } else {
          console.error('‚ùå LINE login failed:', loginData.error)
          setError(loginData.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö')
        }
      } else {
        console.log('‚ö†Ô∏è Not in LIFF environment or LIFF SDK not available')
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ LIFF SDK ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!window.liff) {
          setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ú‡πà‡∏≤‡∏ô LINE App ‡∏´‡∏£‡∏∑‡∏≠ LIFF URL')
          setLoading(false)
          return
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô LIFF ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ LIFF URL
        const liffId = process.env.NODE_ENV === 'production' 
          ? process.env.NEXT_PUBLIC_LIFF_ID_PROD 
          : process.env.NEXT_PUBLIC_LIFF_ID_DEV || '2007609360-3Z0L8Ekg'
        
        if (!liffId) {
          setError('LIFF ID ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö')
          setLoading(false)
          return
        }
        
        const liffUrl = `https://liff.line.me/${liffId}`
        const targetUrl = restaurantId 
          ? `${liffUrl}?restaurant=${restaurantId}`
          : liffUrl
          
        console.log('üîÑ Redirecting to LIFF URL:', targetUrl)
        window.location.href = targetUrl
      }

    } catch (error) {
      console.error('‚ùå LINE login exception:', error)
      
      if (error instanceof Error && error.message.includes('LIFF SDK not loaded')) {
        setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î LINE SDK ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
      } else {
        setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ LINE')
      }
    }

    setLoading(false)
  }

  // ‡πÅ‡∏™‡∏î‡∏á loading ‡∏Ç‡∏ì‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session
  if (checkingSession) {
    return (
      <Container maxWidth="sm">
        <Box sx={{ mt: 8, mb: 4, textAlign: 'center' }}>
          <Card>
            <CardContent sx={{ p: 4 }}>
              <Typography variant="h6" gutterBottom>
                ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞...
              </Typography>
            </CardContent>
          </Card>
        </Box>
      </Container>
    )
  }

  // ‡πÅ‡∏™‡∏î‡∏á success message ‡∏ñ‡πâ‡∏≤ login ‡πÅ‡∏•‡πâ‡∏ß
  if (lineUser) {
    return (
      <Container maxWidth="sm">
        <Box sx={{ mt: 8, mb: 4, textAlign: 'center' }}>
          <Card>
            <CardContent sx={{ p: 4 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 3, justifyContent: 'center' }}>
                <Image src="/images/logo_trim.png" alt="logo" width={150} height={100} />
              </Box>
              <Typography variant="h6" gutterBottom>
                ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
              </Typography>
              <Typography variant="body2" color="text.secondary" gutterBottom>
                ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ {lineUser.name}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤...
              </Typography>
            </CardContent>
          </Card>
        </Box>
      </Container>
    )
  }

  return (
    <Container maxWidth="sm">
      <Box sx={{ mt: 8, mb: 4 }}>
        <Card>
          <CardContent sx={{ p: 4 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 3, justifyContent: 'center' }}>
              <Image src="/images/logo_trim.png" alt="logo" width={150} height={100} />
            </Box>

            <Typography variant="h6" align="center" gutterBottom sx={{ fontWeight: '400', color: 'primary.main' }}>
              ‡πÄ‡∏î‡∏≠‡∏∞ ‡πÄ‡∏£‡∏î ‡πÇ‡∏û‡∏ä‡∏±‡πà‡∏ô
            </Typography>

            <Typography variant="h5" align="center" gutterBottom sx={{ mt: 3, mb: 3 }}>
              {isRequired ? '‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ LINE' : '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ LINE'}
            </Typography>

            {isRequired && (
              <Alert severity="info" sx={{ mb: 3 }}>
                <Typography variant="body2">
                  ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ LINE ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                </Typography>
              </Alert>
            )}

            {errorType && (
              <Alert severity="warning" sx={{ mb: 3 }}>
                <Typography variant="body2">
                  {errorType === 'session_check_failed' && '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ'}
                  {errorType === 'auto_login_failed' && '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}
                  {errorType === 'auto_login_error' && '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥'}
                </Typography>
              </Alert>
            )}

            <Typography variant="body2" align="center" gutterBottom sx={{ mb: 3, color: 'text.secondary' }}>
              {isRequired 
                ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ LINE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£' 
                : (restaurantId ? '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£' : '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ')}
            </Typography>

            {error && (
              <Alert severity="error" sx={{ mt: 2, mb: 2 }}>
                {error}
                <Box sx={{ mt: 2 }}>
                  <Button
                    variant="outlined"
                    size="small"
                    onClick={() => setError('')}
                  >
                    ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                  </Button>
                </Box>
              </Alert>
            )}

            <Button
              fullWidth
              variant="contained"
              onClick={handleLineSignIn}
              disabled={loading}
              sx={{ 
                mt: 3, 
                mb: 2,
                backgroundColor: '#00C300',
                '&:hover': {
                  backgroundColor: '#00A300'
                },
                '&:disabled': {
                  backgroundColor: '#cccccc'
                }
              }}
            >
              {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° LINE...' : '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ LINE'}
            </Button>

            <Box sx={{ textAlign: 'center', mt: 3 }}>
              <Typography variant="body2" color="text.secondary" gutterBottom>
                ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£?
              </Typography>
              <Button 
                variant="outlined"
                fullWidth
                href="/auth/signin"
                sx={{ fontWeight: '400' }}
              >
                ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
              </Button>
            </Box>
          </CardContent>
        </Card>
      </Box>
    </Container>
  )
} 