'use client'

import { useState, useEffect, Suspense } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { 
  Box, 
  Card, 
  CardContent, 
  Typography, 
  Button,
  Alert,
  Container,
  CircularProgress,
  Avatar,
  Fade,
  Slide
} from '@mui/material'
import Image from 'next/image'
import { CheckCircle, Person } from '@mui/icons-material'

interface LineUser {
  id: string
  name: string
  email: string
  role: string
  image?: string
  lineUserId: string
}

interface LineProfile {
  userId: string
  displayName: string
  pictureUrl?: string
  statusMessage?: string
}

// Component ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ useSearchParams ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Suspense boundary
function LineSignInContent() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [checkingSession, setCheckingSession] = useState(true)
  const [lineUser, setLineUser] = useState<LineUser | null>(null)
  const [lineProfile, setLineProfile] = useState<LineProfile | null>(null)
  const [loadingMessage, setLoadingMessage] = useState('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...')
  const [autoLoginAttempted, setAutoLoginAttempted] = useState(false)
  const [showProfileAnimation, setShowProfileAnimation] = useState(false)
  const [isAutoLoginInProgress, setIsAutoLoginInProgress] = useState(false)

  const restaurantId = searchParams.get('restaurant')
  const isRequired = searchParams.get('required') === 'true'
  const errorType = searchParams.get('error')

  // Pre-load LIFF SDK ‡πÅ‡∏ö‡∏ö‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÜ
  useEffect(() => {
    const preloadLiffSdk = async () => {
      try {
        const { ensureLiffSDKLoaded } = await import('@/lib/liffLoader');
        const result = await ensureLiffSDKLoaded();
        if (result.success) {
          console.log('‚úÖ LIFF SDK pre-loaded successfully');
        } else {
          console.log('‚ö†Ô∏è LIFF SDK pre-loading failed, will retry when needed');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è LIFF SDK pre-loading error (silent):', error);
      }
    };

    preloadLiffSdk();
  }, []);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE session
  useEffect(() => {
    checkLineSession()
  }, [])

  // Auto login effect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LIFF environment - ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
  useEffect(() => {
    const attemptAutoLogin = async () => {
      if (autoLoginAttempted || checkingSession) return;
      
      setIsAutoLoginInProgress(true);
      setLoadingMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...');
      
      try {
        const { smartInitializeLiff, gracefulLiffOperation } = await import('@/lib/liffLoader');
        const { getValidatedLiffId } = await import('@/lib/liffUtils');
        
        const { liffId, error: liffError } = getValidatedLiffId();
        if (!liffId) {
          console.log('‚ö†Ô∏è No valid LIFF ID, skipping auto login');
          setAutoLoginAttempted(true);
          setIsAutoLoginInProgress(false);
          return;
        }

        setLoadingMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE...');
        
        // ‡∏•‡∏≠‡∏á initialize LIFF ‡πÅ‡∏ö‡∏ö graceful
        const initResult = await smartInitializeLiff(liffId);
        if (!initResult.success) {
          console.log('‚ö†Ô∏è LIFF initialization failed, will try manual login');
          setAutoLoginAttempted(true);
          setIsAutoLoginInProgress(false);
          return;
        }

        setLoadingMessage('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö login status ‡πÅ‡∏ö‡∏ö graceful
        const isLoggedIn = await gracefulLiffOperation(
          async () => window.liff.isLoggedIn(),
          () => false,
          { operationName: 'Check login status' }
        );

        if (!isLoggedIn) {
          console.log('üîê Not logged in to LINE, will show manual login');
          setAutoLoginAttempted(true);
          setIsAutoLoginInProgress(false);
          return;
        }

        setLoadingMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå...');
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• access token ‡πÅ‡∏•‡∏∞ profile
        const accessToken = await gracefulLiffOperation(
          async () => window.liff.getAccessToken(),
          () => null,
          { operationName: 'Get access token' }
        );
        
        if (!accessToken) {
          console.log('‚ö†Ô∏è No access token available');
          setAutoLoginAttempted(true);
          setIsAutoLoginInProgress(false);
          return;
        }

        setLoadingMessage('‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...');
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å LIFF ‡πÅ‡∏ö‡∏ö graceful
        const profile = await gracefulLiffOperation(
          async () => window.liff.getProfile(),
          () => null,
          { operationName: 'Get profile' }
        );
        
        if (profile) {
          console.log('‚úÖ LINE Profile:', profile);
          setLineProfile(profile);
          setShowProfileAnimation(true);
        }
        
        setLoadingMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...');
        setAutoLoginAttempted(true);
        await handleLineSignIn();
        
      } catch (error) {
        console.log('‚ö†Ô∏è Auto login failed (silent):', error);
        setAutoLoginAttempted(true);
        setIsAutoLoginInProgress(false);
      }
    };

    attemptAutoLogin();
  }, [checkingSession, lineUser, autoLoginAttempted]);

  const checkLineSession = async () => {
    try {
      console.log('üîç Checking LINE session in line-signin page');
      const response = await fetch('/api/auth/line-session')
      if (response.ok) {
        const data = await response.json()
        if (data.authenticated && data.user) {
          console.log('‚úÖ LINE user already authenticated:', data.user.name)
          setLineUser(data.user)
          
          // ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô redirect
          setShowProfileAnimation(true);
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å LINE environment ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
          const isFromLine = typeof window !== 'undefined' && (
            window.location.href.includes('liff.line.me') || 
            window.location.href.includes('line.me') ||
            (window as any).liff || // ‡∏°‡∏µ LIFF object
            navigator.userAgent.includes('Line') || // LINE app user agent
            data.user.lineUserId // ‡∏°‡∏µ LINE user ID = ‡∏°‡∏≤‡∏à‡∏≤‡∏Å LINE
          );
          
          // Debug information for existing session
          console.log('üîç LINE environment detection (existing session):', {
            isFromLine,
            hasLiffObject: !!(window as any).liff,
            userAgent: navigator.userAgent,
            hasLineUserId: !!data.user.lineUserId,
            url: window.location.href
          });
          
          // ‡πÉ‡∏ä‡πâ router.replace ‡πÅ‡∏ó‡∏ô window.location.href ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
          if (isFromLine) {
            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å LINE ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ liff
            console.log('üì± Already authenticated, coming from LINE, redirecting to LIFF page...')
            const liffUrl = restaurantId 
              ? `/liff?restaurant=${restaurantId}` 
              : '/liff';
            console.log('üéØ LIFF URL (existing session):', liffUrl);
            router.replace(liffUrl);
          } else {
            // Redirect ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î loading time (web browser)
            console.log('üåê Already authenticated, not from LINE, using web browser redirect...');
            if (restaurantId) {
              console.log('üè™ Already authenticated, redirecting to restaurant menu:', restaurantId)
              router.replace(`/menu/${restaurantId}?from=line-signin`);
            } else {
              console.log('üè† Redirecting to home')
              router.replace('/');
            }
          }
          return
        }
      } else if (response.status === 401) {
        // ‡∏ñ‡πâ‡∏≤ session backend ‡πÑ‡∏°‡πà‡∏°‡∏µ (401) ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ LIFF login
        if (typeof window !== 'undefined' && (window as any).liff && (window as any).liff.isLoggedIn && (window as any).liff.isLoggedIn()) {
          console.log('üîÑ No backend session but LIFF is logged in, auto re-login backend...');
          await handleLineSignIn();
          return;
        }
      }
      console.log('‚ÑπÔ∏è No existing LINE session, staying on signin page');
    } catch (error) {
      console.log('‚ÑπÔ∏è No existing LINE session (error):', error)
    }
    setCheckingSession(false)
  }

  const handleLineSignIn = async () => {
    setLoading(true)
    setError('')

    try {
      console.log('üì± Starting LINE login via LIFF...')
      
      // ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö LIFF loading ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Å‡∏ß‡πà‡∏≤
      const { ensureLiffSDKLoaded, smartInitializeLiff, gracefulLiffOperation } = await import('@/lib/liffLoader');
      const loadResult = await ensureLiffSDKLoaded(3); // ‡∏•‡∏≠‡∏á 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      
      if (!loadResult.success) {
        console.log('‚ö†Ô∏è LIFF SDK loading failed, trying fallback method');
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î LINE SDK ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô LIFF environment ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (typeof window !== 'undefined' && window.liff) {
        console.log('üîÑ Initializing LIFF...')
        
        const { getValidatedLiffId } = await import('@/lib/liffUtils');
        const { liffId, error: liffError } = getValidatedLiffId();

        if (!liffId) {
          console.error('‚ùå Invalid LIFF configuration:', liffError);
          throw new Error(liffError || 'LIFF ID ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö');
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô initialize LIFF ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
        const initializeLiff = async () => {
          try {
            await window.liff.init({ liffId })
            console.log('‚úÖ LIFF initialized successfully')
            return true
          } catch (initError: any) {
            console.log('‚ö†Ô∏è LIFF init error:', initError)
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô already initialized error ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (initError instanceof Error && (
                initError.message.includes('already initialized') || 
                initError.message.includes('LIFF has already been initialized')
              )) {
              console.log('‚úÖ LIFF already initialized, continuing...')
              return true
            }
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error types ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            if (initError instanceof Error) {
              if (initError.message.includes('invalid liff id') || 
                  initError.message.includes('Invalid LIFF ID')) {
                throw new Error(`LIFF ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${liffId}. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô LINE Developers Console`);
              }
              
              if (initError.message.includes('timeout') || 
                  initError.message.includes('network') ||
                  initError.message.includes('failed to fetch')) {
                throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE servers ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï');
              }
            }
            
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            throw initError
          }
        }

        // ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å init ‡∏û‡∏£‡πâ‡∏≠‡∏° retry mechanism
        let initSuccess = false
        for (let i = 0; i < 3; i++) {
          try {
            await initializeLiff()
            initSuccess = true
            break
          } catch (initError) {
            console.log(`‚ùå LIFF init attempt ${i + 1} failed:`, initError)
            if (i === 2) throw initError // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ throw error
            await new Promise(resolve => setTimeout(resolve, 1000)) // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          }
        }

        if (!initSuccess) {
          throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE ‡πÑ‡∏î‡πâ')
        }

        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ LIFF ready
        await new Promise(resolve => setTimeout(resolve, 500));

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ login
        let isLoggedIn = false;
        try {
          isLoggedIn = window.liff.isLoggedIn();
          console.log('üîç LINE login status:', isLoggedIn)
        } catch (loginCheckError) {
          console.error('‚ùå Error checking login status:', loginCheckError);
          throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ')
        }

        if (!isLoggedIn) {
          console.log('üîê User not logged in to LINE, redirecting to login...')
          try {
            window.liff.login()
          } catch (loginError) {
            console.error('‚ùå Error during LINE login:', loginError);
            throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö LINE ‡πÑ‡∏î‡πâ')
          }
          return
        }

        console.log('‚úÖ User logged in to LINE, getting profile and access token...')
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏î‡∏∂‡∏á)
        if (!lineProfile) {
          try {
            const profile = await window.liff.getProfile();
            console.log('‚úÖ LINE Profile retrieved:', profile);
            setLineProfile(profile);
            setShowProfileAnimation(true);
            setLoadingMessage(`‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${profile.displayName}!`);
            
            // ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
            await new Promise(resolve => setTimeout(resolve, 800));
          } catch (profileError) {
            console.warn('‚ö†Ô∏è Cannot get LINE profile:', profileError);
          }
        }
        
        let accessToken;
        try {
          accessToken = window.liff.getAccessToken()
          console.log('üéØ Access token obtained:', accessToken ? 'YES' : 'NO')
        } catch (tokenError) {
          console.error('‚ùå Error getting access token:', tokenError);
          throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÑ‡∏î‡πâ')
        }

        if (!accessToken) {
          throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏à‡∏≤‡∏Å LINE ‡πÑ‡∏î‡πâ')
        }

        console.log('üéØ Sending access token to backend...')

        // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend
        const response = await fetch('/api/auth/line-login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            accessToken: accessToken,
            restaurantId: restaurantId // ‡∏™‡πà‡∏á restaurantId ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
          })
        })

        if (!response.ok) {
          const errorText = await response.text()
          console.error('‚ùå Backend response error:', response.status, errorText)
          throw new Error(`‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${response.status}`)
        }

        const data = await response.json()

        if (data.success) {
          console.log('‚úÖ LINE login successful:', data.user.name)
          setLineUser(data.user);
          
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô user ‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ role selection
          if (data.isNewUser) {
            console.log('üë§ New user detected, redirecting to role selection')
            setLoadingMessage('‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ...');
            setTimeout(() => {
              router.replace('/auth/role-selection')
            }, 1000); // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 2000ms ‡πÄ‡∏õ‡πá‡∏ô 1000ms
            return
          }

          // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
          if (data.profileUpdated) {
            setLoadingMessage('‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üì∏');
            console.log('üì∏ Profile updated:', {
              name: data.user.name,
              image: data.user.image
            });
          } else {
            setLoadingMessage('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π...');
          }
          
          // ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
          setTimeout(() => {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å LINE environment ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            const isFromLine = typeof window !== 'undefined' && (
              window.location.href.includes('liff.line.me') || 
              window.location.href.includes('line.me') ||
              (window as any).liff || // ‡∏°‡∏µ LIFF object
              navigator.userAgent.includes('Line') || // LINE app user agent
              isAutoLoginInProgress || // ‡∏Å‡∏≥‡∏•‡∏±‡∏á auto login = ‡∏°‡∏≤‡∏à‡∏≤‡∏Å LINE
              lineProfile // ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• LINE profile = ‡∏°‡∏≤‡∏à‡∏≤‡∏Å LINE
            );
            
            // Debug information
            console.log('üîç LINE environment detection:', {
              isFromLine,
              hasLiffObject: !!(window as any).liff,
              userAgent: navigator.userAgent,
              isAutoLoginInProgress,
              hasLineProfile: !!lineProfile,
              url: window.location.href
            });
            
            // ‡πÉ‡∏ä‡πâ router.replace ‡πÅ‡∏ó‡∏ô window.location.href ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
            if (isFromLine) {
              // ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å LINE ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ liff
              console.log('üì± Coming from LINE, redirecting to LIFF page...')
              const liffUrl = data.shouldRedirectToRestaurant && data.restaurantId 
                ? `/liff?restaurant=${data.restaurantId}` 
                : '/liff';
              console.log('üéØ LIFF URL:', liffUrl);
              router.replace(liffUrl);
            } else {
              // ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å web browser ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ï‡∏≤‡∏° response ‡∏õ‡∏Å‡∏ï‡∏¥
              console.log('üåê Not from LINE, using web browser redirect...');
              if (data.shouldRedirectToRestaurant && data.restaurantId) {
                console.log('üè™ Redirecting to restaurant menu:', data.restaurantId)
                router.replace(`/menu/${data.restaurantId}?from=line-signin`);
              } else {
                console.log('üîÑ Redirecting according to API response:', data.redirectUrl)
                router.replace(data.redirectUrl);
              }
            }
          }, 800); // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 1500ms ‡πÄ‡∏õ‡πá‡∏ô 800ms
        } else {
          console.error('‚ùå LINE login failed:', data.error)
          throw new Error(data.error || '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ LINE ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß')
        }
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô LINE environment
        console.log('‚ö†Ô∏è Not in LINE environment')
        throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ LINE')
      }

    } catch (error) {
      console.error('‚ùå LINE signin error:', error)
      setIsAutoLoginInProgress(false);
      
      let errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'
      
      if (error instanceof Error) {
        if (error.message.includes('LIFF SDK not loaded')) {
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô SDK error ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á auto login ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô
          if (isAutoLoginInProgress) {
            console.log('üîÑ SDK loading during auto login, will retry...');
            setLoading(false);
            return;
          }
          errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î LINE SDK ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï'
        } else if (error.message.includes('timeout')) {
          errorMessage = '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        } else if (error.message.includes('LIFF ID')) {
          errorMessage = error.message
        } else if (error.message.includes('‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå')) {
          errorMessage = error.message
        } else {
          errorMessage = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`
        }
      }
      
      setError(errorMessage)
    }

    setLoading(false)
  }

  // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session
  if (checkingSession) {
    return (
      <Container maxWidth="sm">
        <Box sx={{ 
          minHeight: '100vh', 
          display: 'flex', 
          alignItems: 'center', 
          justifyContent: 'center',
          py: 4,
          background: '#ffffff'
        }}>
          <Fade in={true} timeout={800}>
            <Card sx={{ 
              borderRadius: 4, 
              boxShadow: '0 8px 32px rgba(0,0,0,0.08)',
              background: '#ffffff',
              border: '1px solid rgba(0,0,0,0.06)'
            }}>
              <CardContent sx={{ p: 4, textAlign: 'center' }}>
                <Box sx={{ mb: 3 }}>
                  <Image src="/images/logo_trim.png" alt="logo" width={150} height={100} />
                </Box>
                
                {lineProfile && showProfileAnimation ? (
                  <Slide direction="up" in={showProfileAnimation} timeout={600}>
                    <Box sx={{ mb: 3 }}>
                      <Avatar
                        src={lineProfile.pictureUrl}
                        sx={{ 
                          width: 80, 
                          height: 80, 
                          mx: 'auto', 
                          mb: 2,
                          border: '4px solid #06C755',
                          boxShadow: '0 8px 16px rgba(6,199,85,0.3)'
                        }}
                      >
                        <Person sx={{ fontSize: 40 }} />
                      </Avatar>
                      <Typography variant="h6" sx={{ color: '#333', fontWeight: 600 }}>
                        {lineProfile.displayName}
                      </Typography>
                      {lineProfile.statusMessage && (
                        <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                          "{lineProfile.statusMessage}"
                        </Typography>
                      )}
                    </Box>
                  </Slide>
                ) : (
                  <CircularProgress sx={{ mb: 2, color: '#06C755' }} />
                )}
                
                <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                  {loadingMessage}
                </Typography>
                {!isAutoLoginInProgress && (
                  <Typography variant="caption" color="text.secondary">
                    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...
                  </Typography>
                )}
                {isAutoLoginInProgress && (
                  <Typography variant="caption" sx={{ color: '#10B981' }}>
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...
                  </Typography>
                )}
              </CardContent>
            </Card>
          </Fade>
        </Box>
      </Container>
    )
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  if (lineUser) {
    return (
      <Container maxWidth="sm">
        <Box sx={{ 
          minHeight: '100vh', 
          display: 'flex', 
          alignItems: 'center', 
          justifyContent: 'center',
          py: 4,
          background: '#ffffff'
        }}>
          <Fade in={true} timeout={800}>
            <Card sx={{ 
              borderRadius: 4, 
              boxShadow: '0 8px 32px rgba(0,0,0,0.08)',
              background: '#ffffff',
              border: '1px solid rgba(0,0,0,0.06)'
            }}>
              <CardContent sx={{ p: 4, textAlign: 'center' }}>
                <Box sx={{ mb: 3 }}>
                  <Image src="/images/logo_trim.png" alt="logo" width={150} height={100} />
                </Box>
                
                <Slide direction="up" in={showProfileAnimation} timeout={600}>
                  <Box sx={{ mb: 3 }}>
                    <Box sx={{ position: 'relative', display: 'inline-block', mb: 2 }}>
                      <Avatar
                        src={lineProfile?.pictureUrl || lineUser.image}
                        sx={{ 
                          width: 100, 
                          height: 100, 
                          mx: 'auto',
                          border: '4px solid #06C755',
                          boxShadow: '0 8px 16px rgba(6,199,85,0.3)'
                        }}
                      >
                        <Person sx={{ fontSize: 50 }} />
                      </Avatar>
                      <CheckCircle 
                        sx={{ 
                          position: 'absolute', 
                          bottom: -5, 
                          right: -5, 
                          color: '#06C755', 
                          backgroundColor: 'white', 
                          borderRadius: '50%',
                          fontSize: 32
                        }} 
                      />
                    </Box>
                    
                    <Alert severity="success" sx={{ mb: 3, borderRadius: 2 }}>
                      <Typography variant="h6" gutterBottom sx={{ fontWeight: 600 }}>
                        ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ
                      </Typography>
                      <Typography variant="body1" sx={{ fontWeight: 500 }}>
                        ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {lineProfile?.displayName || lineUser.name}
                      </Typography>
                      {lineProfile?.statusMessage && (
                        <Typography variant="body2" sx={{ mt: 1, fontStyle: 'italic' }}>
                          "{lineProfile.statusMessage}"
                        </Typography>
                      )}
                    </Alert>
                  </Box>
                </Slide>
                
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 1 }}>
                  <CircularProgress size={16} sx={{ color: '#06C755' }} />
                  <Typography variant="body2" color="text.secondary">
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π...
                  </Typography>
                </Box>
              </CardContent>
            </Card>
          </Fade>
        </Box>
      </Container>
    )
  }

  const getErrorMessage = (errorType: string | null) => {
    switch (errorType) {
      case 'auto_login_failed':
        return '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà'
      case 'auto_login_error':
        return '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      case 'session_required':
        return '‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ LINE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π'
      default:
        return null
    }
  }

  const errorMessage = getErrorMessage(errorType)

  return (
    <Container maxWidth="sm">
      <Box sx={{ 
        minHeight: '100vh', 
        display: 'flex', 
        alignItems: 'center', 
        justifyContent: 'center',
        py: 4,
        background: '#ffffff'
      }}>
        <Fade in={true} timeout={800}>
          <Card sx={{ 
            borderRadius: 4, 
            boxShadow: '0 8px 32px rgba(0,0,0,0.08)',
            background: '#ffffff',
            border: '1px solid rgba(0,0,0,0.06)'
          }}>
            <CardContent sx={{ p: 4, textAlign: 'center' }}>
              {/* Logo */}
              <Box sx={{ mb: 3 }}>
                <Image src="/images/logo_trim.png" alt="logo" width={150} height={100} />
              </Box>

              {/* Title */}
              <Typography variant="h5" gutterBottom sx={{ fontWeight: 'bold', color: '#06C755' }}>
                {isRequired ? '‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' : '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ LINE'}
              </Typography>

              {/* Required message */}
              {isRequired && (
                <Alert severity="info" sx={{ mb: 3, borderRadius: 2 }}>
                  <Typography variant="body2">
                    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ LINE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                  </Typography>
                </Alert>
              )}

              {/* Error from URL parameters */}
              {errorMessage && (
                <Alert severity="warning" sx={{ mb: 3, borderRadius: 2 }}>
                  <Typography variant="body2">
                    {errorMessage}
                  </Typography>
                </Alert>
              )}

              {/* Error from component state - ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á auto login */}
              {error && !isAutoLoginInProgress && (
                <Alert severity="error" sx={{ mb: 3, borderRadius: 2 }}>
                  <Typography variant="body2">
                    {error}
                  </Typography>
                </Alert>
              )}

              {/* Description */}
              <Typography variant="body1" sx={{ mb: 4, color: 'text.secondary' }}>
                {restaurantId 
                  ? '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£' 
                  : '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô'
                }
              </Typography>

              {/* Login Button */}
              <Button
                variant="contained"
                size="large"
                fullWidth
                onClick={handleLineSignIn}
                disabled={loading}
                sx={{
                  backgroundColor: '#06C755',
                  color: 'white',
                  py: 2,
                  fontSize: '1.1rem',
                  fontWeight: 'bold',
                  borderRadius: 3,
                  boxShadow: '0 4px 12px rgba(6,199,85,0.3)',
                  '&:hover': {
                    backgroundColor: '#05B94C',
                    transform: 'translateY(-2px)',
                    boxShadow: '0 6px 20px rgba(6,199,85,0.4)',
                  },
                  '&:disabled': {
                    backgroundColor: '#cccccc',
                  },
                  transition: 'all 0.2s ease'
                }}
              >
                {loading ? (
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <CircularProgress size={20} color="inherit" />
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...
                  </Box>
                ) : (
                  '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ LINE'
                )}
              </Button>

              {/* Help text */}
              <Typography variant="body2" sx={{ mt: 3, color: 'text.secondary' }}>
                ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ LINE
              </Typography>
            </CardContent>
          </Card>
        </Fade>
      </Box>
    </Container>
  )
}

// Loading fallback component
function LineSignInLoading() {
  return (
    <Container maxWidth="sm">
      <Box sx={{ 
        minHeight: '100vh', 
        display: 'flex', 
        alignItems: 'center', 
        justifyContent: 'center',
        py: 4,
        background: '#ffffff'
      }}>
        <Card sx={{ 
          borderRadius: 4, 
          boxShadow: '0 8px 32px rgba(0,0,0,0.08)',
          background: '#ffffff',
          border: '1px solid rgba(0,0,0,0.06)'
        }}>
          <CardContent sx={{ p: 4, textAlign: 'center' }}>
            <Box sx={{ mb: 3 }}>
              <Image src="/images/logo_trim.png" alt="logo" width={150} height={100} />
            </Box>
            
            <CircularProgress size={40} sx={{ mb: 2, color: '#06C755' }} />
            <Typography variant="body2" color="text.secondary">
              ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...
            </Typography>
          </CardContent>
        </Card>
      </Box>
    </Container>
  )
}

// Main component ‡∏ó‡∏µ‡πà‡∏´‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢ Suspense
export default function LineSignInPage() {
  return (
    <Suspense fallback={<LineSignInLoading />}>
      <LineSignInContent />
    </Suspense>
  )
} 