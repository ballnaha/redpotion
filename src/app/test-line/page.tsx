'use client'

import { useState, useEffect } from 'react'
import { signIn, useSession } from 'next-auth/react'
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Alert,
  Container,
  List,
  ListItem,
  ListItemText,
  CircularProgress,
  Divider,
} from '@mui/material'
import { PlayArrow, Science, CheckCircle, Error as ErrorIcon } from '@mui/icons-material'

export default function TestLinePage() {
  const [testResults, setTestResults] = useState<any[]>([])
  const [loading, setLoading] = useState(false)
  const [clientInfo, setClientInfo] = useState({
    currentUrl: 'Loading...',
    userAgent: 'Loading...',
    mounted: false
  })
  const { data: session, status } = useSession()

  useEffect(() => {
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô hydration mismatch ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• client-side ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å mount
    setClientInfo({
      currentUrl: window.location.href,
      userAgent: window.navigator.userAgent,
      mounted: true
    })
  }, [])

  const runTest = async (testName: string, testFunction: () => Promise<any>) => {
    setLoading(true)
    try {
      const result = await testFunction()
      setTestResults(prev => [...prev, {
        name: testName,
        status: 'success',
        data: result,
        timestamp: new Date().toLocaleTimeString()
      }])
    } catch (error) {
      setTestResults(prev => [...prev, {
        name: testName,
        status: 'error',
        error: error instanceof Error ? error.message : String(error),
        timestamp: new Date().toLocaleTimeString()
      }])
    }
    setLoading(false)
  }

  const testProviders = async () => {
    const response = await fetch('/api/auth/providers')
    const data = await response.json()
    return data
  }

  const testLineConfig = async () => {
    const config = {
      environment: process.env.NODE_ENV || 'Not found',
      liffId: process.env.NEXT_PUBLIC_LIFF_ID || 'Not found',
      hasClientId: !!process.env.NEXT_PUBLIC_LINE_CLIENT_ID,
      nextAuthUrl: typeof window !== 'undefined' ? window.location.origin : 'Server-side',
      expectedCallbackUrl: `${typeof window !== 'undefined' ? window.location.origin : 'http://localhost:3000'}/api/auth/callback/line`,
      testLoginUrl: `/api/auth/signin/line?callbackUrl=${encodeURIComponent('/menu/cmcg20f2i00029hu8p2am75df')}`,
      timestamp: new Date().toISOString()
    }
    return config
  }

  const testSessionInfo = async () => {
    return {
      status,
      hasSession: !!session,
      user: session?.user || null,
      timestamp: new Date().toISOString()
    }
  }

  const testLineLogin = async () => {
    console.log('üöÄ Testing LINE login...')
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö direct redirect
    const lineLoginUrl = `/api/auth/signin/line?callbackUrl=${encodeURIComponent('/menu/cmcg20f2i00029hu8p2am75df')}`
    console.log('üîó Generated LINE login URL:', lineLoginUrl)
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ redirect ‡∏à‡∏£‡∏¥‡∏á
    return {
      method: 'Direct redirect',
      url: lineLoginUrl,
      description: '‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏∞ redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ LINE login ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á',
      note: '‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ window.location.href = lineLoginUrl'
    }
  }

  const clearResults = () => {
    setTestResults([])
  }

  const getIcon = (status: string) => {
    switch (status) {
      case 'success':
        return <CheckCircle sx={{ color: 'success.main' }} />
      case 'error':
        return <ErrorIcon sx={{ color: 'error.main' }} />
      default:
        return <Science />
    }
  }

  return (
    <Container maxWidth="md">
      <Box sx={{ mt: 4, mb: 4 }}>
        <Typography variant="h4" gutterBottom>
          üß™ LINE Login Test Suite
        </Typography>
        
        <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
          ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ debug ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ LINE Login
        </Typography>

        {/* Current Session Info */}
        <Card sx={{ mb: 3 }}>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            </Typography>
            <Typography variant="body2">
              Status: <strong>{status}</strong>
            </Typography>
            {session?.user && (
              <Box sx={{ mt: 1 }}>
                <Typography variant="body2">
                  User: {session.user.name} ({session.user.email})
                </Typography>
                <Typography variant="body2">
                  Role: {session.user.role}
                </Typography>
              </Box>
            )}
          </CardContent>
        </Card>

        {/* Test Controls */}
        <Card sx={{ mb: 3 }}>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            </Typography>
            
            <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', mb: 2 }}>
              <Button
                variant="contained"
                startIcon={<PlayArrow />}
                onClick={() => runTest('NextAuth Providers', testProviders)}
                disabled={loading}
              >
                ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Providers
              </Button>

              <Button
                variant="contained"
                startIcon={<PlayArrow />}
                onClick={() => runTest('LINE Configuration', testLineConfig)}
                disabled={loading}
              >
                ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE Config
              </Button>

              <Button
                variant="contained"
                startIcon={<PlayArrow />}
                onClick={() => runTest('Session Information', testSessionInfo)}
                disabled={loading}
              >
                ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Session
              </Button>

              <Button
                variant="contained"
                color="warning"
                startIcon={<PlayArrow />}
                onClick={() => runTest('LINE Login Flow', testLineLogin)}
                disabled={loading}
              >
                ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE Login (URL)
              </Button>

              <Button
                variant="contained"
                color="success"
                onClick={() => {
                  if (clientInfo.mounted) {
                    const lineLoginUrl = `/api/auth/signin/line?callbackUrl=${encodeURIComponent('/menu/cmcg20f2i00029hu8p2am75df')}`
                    console.log('üöÄ Direct LINE login redirect to:', lineLoginUrl)
                    window.location.href = lineLoginUrl
                  }
                }}
                disabled={loading || !clientInfo.mounted}
              >
                üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE Login ‡∏à‡∏£‡∏¥‡∏á
              </Button>
            </Box>

            <Box sx={{ display: 'flex', gap: 2 }}>
              <Button
                variant="outlined"
                onClick={clearResults}
                disabled={loading}
              >
                ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
              </Button>

              {loading && (
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <CircularProgress size={20} />
                  <Typography variant="body2">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...</Typography>
                </Box>
              )}
            </Box>
          </CardContent>
        </Card>

        {/* Test Results */}
        {testResults.length > 0 && (
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
              </Typography>
              
              <List>
                {testResults.map((result, index) => (
                  <div key={index}>
                    <ListItem alignItems="flex-start" sx={{ flexDirection: 'column', alignItems: 'stretch' }}>
                      <Box sx={{ display: 'flex', alignItems: 'flex-start', width: '100%' }}>
                        <Box sx={{ mr: 2, mt: 0.5, flexShrink: 0 }}>
                          {getIcon(result.status)}
                        </Box>
                        <Box sx={{ flexGrow: 1 }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                            <Typography variant="subtitle1">
                              {result.name}
                            </Typography>
                            <Typography variant="caption" color="text.secondary">
                              {result.timestamp}
                            </Typography>
                          </Box>
                          
                          {result.status === 'error' ? (
                            <Alert severity="error" sx={{ mb: 1 }}>
                              <Typography variant="body2">
                                {result.error}
                              </Typography>
                            </Alert>
                          ) : (
                            <Alert severity="success" sx={{ mb: 1 }}>
                              <Typography variant="body2" component="pre" sx={{ 
                                whiteSpace: 'pre-wrap', 
                                fontSize: '0.875rem',
                                fontFamily: 'monospace' 
                              }}>
                                {JSON.stringify(result.data, null, 2)}
                              </Typography>
                            </Alert>
                          )}
                        </Box>
                      </Box>
                    </ListItem>
                    {index < testResults.length - 1 && <Divider />}
                  </div>
                ))}
              </List>
            </CardContent>
          </Card>
        )}

        {/* Environment Info */}
        <Card sx={{ mt: 3 }}>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
            </Typography>
            {clientInfo.mounted ? (
              <Typography variant="body2" component="pre" sx={{ 
                backgroundColor: '#f5f5f5', 
                p: 2, 
                borderRadius: 1,
                fontSize: '0.875rem',
                fontFamily: 'monospace'
              }}>
{`NODE_ENV: ${process.env.NODE_ENV}
NEXT_PUBLIC_LIFF_ID: ${process.env.NEXT_PUBLIC_LIFF_ID || 'Not set'}
Current URL: ${clientInfo.currentUrl}
User Agent: ${clientInfo.userAgent.substring(0, 100)}...`}
              </Typography>
            ) : (
              <Alert severity="info">
                ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°...
              </Alert>
            )}
          </CardContent>
        </Card>

        {/* Debug Info for error=line */}
        <Card sx={{ mt: 3 }}>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              üêõ Debug Information ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error=line
            </Typography>
            <Alert severity="info" sx={{ mb: 2 }}>
              ‡∏´‡∏≤‡∏Å‡∏û‡∏ö error=line ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô LINE Login ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
            </Alert>
            
            <Typography variant="subtitle2" gutterBottom>
              ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ:
            </Typography>
            
            <Box component="ul" sx={{ pl: 2, mb: 2 }}>
              <Typography component="li" variant="body2">
                LINE Channel ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ activate ‡πÉ‡∏ô LINE Developers Console
              </Typography>
              <Typography component="li" variant="body2">
                Callback URL ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô: http://localhost:3000/api/auth/callback/line)
              </Typography>
              <Typography component="li" variant="body2">
                Channel ID ‡∏´‡∏£‡∏∑‡∏≠ Channel Secret ‡∏ú‡∏¥‡∏î
              </Typography>
              <Typography component="li" variant="body2">
                Environment variables ‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
              </Typography>
              <Typography component="li" variant="body2">
                Browser cache ‡∏´‡∏£‡∏∑‡∏≠ cookies ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤
              </Typography>
            </Box>

            <Typography variant="subtitle2" gutterBottom>
              ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:
            </Typography>
            
            <Box component="ol" sx={{ pl: 2 }}>
              <Typography component="li" variant="body2">
                ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE Developers Console: https://developers.line.biz/console/
              </Typography>
              <Typography component="li" variant="body2">
                ‡πÉ‡∏ä‡πâ incognito mode ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á cache
              </Typography>
              <Typography component="li" variant="body2">
                ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó development server: npm run dev
              </Typography>
              <Typography component="li" variant="body2">
                ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö console logs ‡∏ó‡∏±‡πâ‡∏á browser ‡πÅ‡∏•‡∏∞ server
              </Typography>
            </Box>
          </CardContent>
        </Card>
      </Box>
    </Container>
  )
} 