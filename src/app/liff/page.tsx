'use client';

import { useEffect, useState, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { Box, CircularProgress, Typography, Card, Alert, Button } from '@mui/material';

// Component ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ useSearchParams ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Suspense boundary
function LiffLandingContent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [loadingMessage, setLoadingMessage] = useState('‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°...');
  const [liffReady, setLiffReady] = useState(false);

  // Auto LINE Login Effect
  useEffect(() => {
    const initializeLiffAndLogin = async () => {
      try {
        setLoadingMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î LINE SDK...');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LIFF session ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
        const { restoreLiffSession } = await import('@/lib/sessionUtils');
        const sessionRestore = await restoreLiffSession();
        
        if (sessionRestore.success && sessionRestore.sessionData) {
          console.log('‚úÖ LIFF session restored from storage');
          setLoadingMessage('‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π...');
          
          const restaurantId = searchParams.get('restaurant') || sessionRestore.sessionData.restaurantId;
          
          if (restaurantId) {
            // Immediate redirect for faster loading
            window.location.href = `/menu/${restaurantId}?from=liff-restore`;
          } else {
            window.location.href = '/';
          }
          return;
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö backend session ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥ LIFF login ‡πÉ‡∏´‡∏°‡πà
        console.log('üîÑ Checking backend session before LIFF login...');
        try {
          const sessionResponse = await fetch('/api/auth/line-session');
          const sessionData = await sessionResponse.json();
          
          if (sessionResponse.ok && sessionData.authenticated && sessionData.user) {
            console.log('‚úÖ Backend session valid, redirecting...');
            setLoadingMessage('‡∏û‡∏ö session ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π...');
            
            const restaurantId = searchParams.get('restaurant') || sessionData.restaurantId;
            if (restaurantId) {
              window.location.href = `/menu/${restaurantId}?from=session-valid`;
            } else {
              window.location.href = '/';
            }
            return;
          } else if (sessionResponse.status === 401) {
            console.log('‚ùå Backend session invalid (401), proceeding with fresh LIFF login...');
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏ì‡∏µ user ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (sessionData?.needsReAuth && sessionData?.reason === 'user_deleted') {
              console.log('üóëÔ∏è User was deleted from database, need fresh registration');
              setLoadingMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà...');
              
              // Clear LIFF session storage
              try {
                const { clearLiffSession } = await import('@/lib/sessionUtils');
                clearLiffSession();
              } catch (clearError) {
                console.warn('‚ö†Ô∏è Failed to clear LIFF session:', clearError);
              }
            }
            
            // ‡∏ñ‡πâ‡∏≤ session invalid (401) ‡πÉ‡∏´‡πâ‡∏•‡∏ö cookies ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥ login ‡πÉ‡∏´‡∏°‡πà
            try {
              // ‡∏•‡∏ö session cookies
              document.cookie.split(';').forEach(cookie => {
                const eqPos = cookie.indexOf('=');
                const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();
                if (name.includes('line-session') || name.includes('next-auth') || name.includes('LIFF_STORE')) {
                  document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/`;
                  document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;domain=${window.location.hostname}`;
                }
              });
              console.log('üóëÔ∏è Cleared stale cookies');
            } catch (cookieError) {
              console.warn('‚ö†Ô∏è Failed to clear cookies:', cookieError);
            }
          }
        } catch (sessionCheckError) {
          console.log('‚ö†Ô∏è Session check failed, continuing with LIFF login:', sessionCheckError);
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ session ‡∏´‡∏£‡∏∑‡∏≠ session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÉ‡∏´‡πâ‡∏ó‡∏≥ LIFF login ‡∏õ‡∏Å‡∏ï‡∏¥
        console.log('üîÑ No valid session found, proceeding with LIFF login...');
        
        // ‡πÉ‡∏ä‡πâ liffLoader ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
        const { ensureLiffSDKLoaded } = await import('@/lib/liffLoader');
        setLoadingMessage('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE SDK...');
        
        const loadResult = await ensureLiffSDKLoaded(3);
        if (!loadResult.success) {
          console.error('‚ùå LIFF SDK loading failed:', loadResult.error);
          setError('sdk_error');
          setIsLoading(false);
          return;
        }
        
        setLoadingMessage('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE...');
        
        // Initialize LIFF
        const { getValidatedLiffId } = await import('@/lib/liffUtils');
        const { liffId, error: liffError } = getValidatedLiffId();
        
        if (!liffId) {
          console.error('‚ùå Invalid LIFF configuration:', liffError);
          setError('invalid_config');
          setIsLoading(false);
          return;
        }
        
        // ‡πÉ‡∏ä‡πâ smart LIFF initialization
        const { smartInitializeLiff } = await import('@/lib/liffLoader');
        const initResult = await smartInitializeLiff(liffId, 3);
        
        if (!initResult.success) {
          console.error('‚ùå LIFF initialization failed:', initResult.error);
          
          if (initResult.error?.includes('Invalid LIFF ID')) {
            setError('invalid_liff_id');
          } else if (initResult.error?.includes('Network error')) {
            setError('network_error');
          } else {
            setError('liff_init_failed');
          }
          setIsLoading(false);
          return;
        }
        
        console.log('‚úÖ LIFF initialized successfully');
        setLiffReady(true);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        if (!window.liff.isLoggedIn()) {
          setLoadingMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö LINE...');
          console.log('üîê Auto login to LINE...');
          
          // Auto login ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ user ‡∏Å‡∏î
          window.liff.login();
          return;
        } else {
          setLoadingMessage('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ...');
          console.log('‚úÖ Already logged in to LINE');
          
          // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ authentication ‡∏Å‡∏±‡∏ö backend
          await handleLineAuthentication();
        }
      } catch (error) {
        console.error('‚ùå LIFF initialization error:', error);
        
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        if (error instanceof Error) {
          if (error.message.includes('timeout')) {
            setError('connection_timeout');
          } else if (error.message.includes('Failed to load LIFF SDK')) {
            setError('sdk_error');
          } else if (error.message.includes('initialization failed')) {
            setError('init_failed');
          } else {
            setError('connection_error');
          }
        } else {
          setError('connection_error');
        }
        
        setIsLoading(false);
      }
    };

    initializeLiffAndLogin();
  }, []);

  // Handle LINE Authentication
  const handleLineAuthentication = async () => {
    try {
      setLoadingMessage('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô...');
      
      const accessToken = (window as any).liff.getAccessToken();
      const restaurantId = searchParams.get('restaurant');
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö accessToken ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á request
      if (!accessToken) {
        console.error('‚ùå No access token available from LIFF');
        setError('auth_error');
        setIsLoading(false);
        return;
      }

      if (typeof accessToken !== 'string' || accessToken.trim() === '') {
        console.error('‚ùå Invalid access token format:', typeof accessToken, accessToken?.length);
        setError('auth_error');
        setIsLoading(false);
        return;
      }
      
      console.log('üéØ Sending LINE token to backend...', { 
        restaurantId,
        hasAccessToken: !!accessToken,
        accessTokenLength: accessToken?.length,
        accessTokenStart: accessToken?.substring(0, 20) + '...'
      });
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö platform ‡∏à‡∏≤‡∏Å LIFF SDK
      let detectedPlatform = 'BROWSER';
      try {
        if (window.liff && typeof window.liff.getOS === 'function') {
          const liffOS = window.liff.getOS();
          if (liffOS === 'ios') detectedPlatform = 'IOS';
          else if (liffOS === 'android') detectedPlatform = 'ANDROID';
          else detectedPlatform = 'BROWSER';
          console.log('üì± Detected platform from LIFF:', liffOS, '‚Üí', detectedPlatform);
        }
      } catch (platformError) {
        console.warn('‚ö†Ô∏è Could not detect platform from LIFF:', platformError);
      }
      
      const requestData = {
        accessToken: accessToken,
        restaurantId: restaurantId,
        platform: detectedPlatform
      };
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö request data ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
      if (!requestData.accessToken) {
        console.error('‚ùå accessToken is missing in request data');
        setError('auth_error');
        setIsLoading(false);
        return;
      }
      
      console.log('üì¶ Request data being sent:', {
        hasAccessToken: !!requestData.accessToken,
        accessTokenType: typeof requestData.accessToken,
        restaurantId: requestData.restaurantId,
        platform: requestData.platform,
        requestSize: JSON.stringify(requestData).length
      });

      const response = await fetch('/api/auth/line-login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      });

      console.log('üì° Response received:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok,
        headers: Object.fromEntries(response.headers.entries())
      });

      let data;
      try {
        data = await response.json();
        console.log('üìÑ Response data:', data);
      } catch (parseError) {
        console.error('‚ùå Failed to parse response JSON:', parseError);
        const textResponse = await response.text();
        console.error('üìÑ Raw response text:', textResponse);
        throw new Error('Server returned invalid JSON response');
      }

      if (response.ok && data.success) {
        console.log('‚úÖ LINE authentication successful:', data.user.name);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
        if (data.profileUpdated) {
          console.log('üì∏ Profile updated:', {
            name: data.user.name,
            image: data.user.image
          });
        }
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å LIFF session ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ refresh
        try {
          const { saveLiffSession } = await import('@/lib/sessionUtils');
          const userProfile = (window as any).liff.getProfile ? await (window as any).liff.getProfile() : data.user;
          saveLiffSession(accessToken, userProfile, restaurantId || undefined);
        } catch (sessionError) {
          console.warn('‚ö†Ô∏è Failed to save LIFF session:', sessionError);
        }
        
        if (data.isNewUser) {
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô user ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å iOS/Android ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ‡πÄ‡∏°‡∏ô‡∏π‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
          if (detectedPlatform === 'IOS' || detectedPlatform === 'ANDROID') {
            setLoadingMessage('‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π...');
            console.log('üì± New mobile user detected, skipping role selection');
            
            if (data.shouldRedirectToRestaurant && data.restaurantId) {
              setTimeout(() => {
                window.location.href = `/menu/${data.restaurantId}?from=mobile-new-user`;
              }, 1000);
              return;
            } else {
              // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ restaurant ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô default
              setTimeout(async () => {
                try {
                  const response = await fetch('/api/restaurant/default');
                  if (response.ok) {
                    const defaultRestaurant = await response.json();
                    window.location.href = `/menu/${defaultRestaurant.restaurantId}?from=mobile-new-user`;
                  } else {
                    window.location.href = '/';
                  }
                } catch (error) {
                  console.error('‚ùå Failed to get default restaurant:', error);
                  window.location.href = '/';
                }
              }, 1000);
              return;
            }
          } else {
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Browser ‡πÉ‡∏´‡πâ‡πÑ‡∏õ role selection ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
            setLoadingMessage('‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ...');
            console.log('üë§ New browser user detected, redirecting to role selection');
            
            setTimeout(() => {
              window.location.href = '/auth/role-selection';
            }, 1500);
            return;
          }
        }

        if (data.shouldRedirectToRestaurant && data.restaurantId) {
          setLoadingMessage(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£...`);
          console.log('üè™ Redirecting to restaurant menu:', data.restaurantId);
          
          // Fast redirect for better UX
          window.location.href = `/menu/${data.restaurantId}?from=liff-auto-login`;
        } else {
          setLoadingMessage('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
          window.location.href = data.redirectUrl;
        }
      } else {
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error cases ‡∏ï‡πà‡∏≤‡∏á ‡πÜ
        if (response.status === 401) {
          console.error('‚ùå Authentication failed (401), invalid access token');
          // Access token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ logout ‡πÅ‡∏•‡∏∞ login ‡πÉ‡∏´‡∏°‡πà
          try {
            if (window.liff && window.liff.logout) {
              console.log('üîÑ Logging out from LIFF and retrying...');
              window.liff.logout();
              window.liff.login();
              return;
            }
          } catch (liffError) {
            console.warn('‚ö†Ô∏è LIFF logout failed:', liffError);
          }
          setError('auth_error');
        } else if (response.status === 400) {
          console.error('‚ùå Bad request (400):', data?.error);
          setError('auth_error');
        } else {
          console.error('‚ùå LINE authentication failed:', {
            status: response.status,
            error: data?.error,
            fullResponse: data
          });
          setError('auth_error');
        }
        setIsLoading(false);
      }
    } catch (error) {
      console.error('‚ùå Authentication error:', error);
      setError('auth_error');
      setIsLoading(false);
    }
  };

  // Load LIFF SDK with preload optimization - ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ preload ‡πÉ‡∏ô layout ‡πÅ‡∏•‡πâ‡∏ß
  const loadLiffSdk = (): Promise<void> => {
    return new Promise((resolve, reject) => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LIFF SDK ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if ((window as any).liff) {
        console.log('‚úÖ LIFF SDK already available from preload');
        resolve();
        return;
      }

      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ script tag ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏´‡∏° (‡∏à‡∏≤‡∏Å layout)
      const existingScript = document.querySelector('script[src*="liff/edge/2/sdk.js"]');
      if (existingScript) {
        console.log('üîÑ LIFF SDK script exists, waiting for load...');
        
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ script ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        const checkLoaded = () => {
          if ((window as any).liff) {
            console.log('‚úÖ LIFF SDK loaded from existing script');
            resolve();
          } else {
            setTimeout(checkLoaded, 100);
          }
        };
        
        setTimeout(() => {
          if (!(window as any).liff) {
            console.warn('‚ö†Ô∏è LIFF SDK timeout, loading manually');
            reject(new Error('LIFF SDK load timeout'));
          }
        }, 3000);
        
        checkLoaded();
        return;
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á script ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
      console.log('üì• Loading LIFF SDK manually...');
      const script = document.createElement('script');
      script.src = 'https://static.line-scdn.net/liff/edge/2/sdk.js';
      script.async = true;
      script.crossOrigin = 'anonymous';
      script.onload = () => {
        console.log('‚úÖ LIFF SDK loaded manually');
        resolve();
      };
      script.onerror = () => {
        console.error('‚ùå Failed to load LIFF SDK');
        reject(new Error('Failed to load LIFF SDK'));
      };
      document.head.appendChild(script);
    });
  };

  // Fallback redirect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô LINE environment
  useEffect(() => {
    const handleFallbackRedirect = async () => {
      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ LIFF ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° initialize ‡∏Å‡πà‡∏≠‡∏ô
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      if (!liffReady && isLoading) {
        console.log('‚ö†Ô∏è Not in LINE environment or LIFF failed, using fallback');
        
        const restaurantId = searchParams.get('restaurant');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session ‡∏õ‡∏Å‡∏ï‡∏¥
        try {
          const sessionResponse = await fetch('/api/auth/line-session');
          const sessionData = await sessionResponse.json();
          
          if (sessionData.authenticated && sessionData.user) {
            console.log('‚úÖ User already authenticated via session');
            
            if (restaurantId) {
              window.location.href = `/menu/${restaurantId}?liff=true&from=liff-fallback`;
            } else {
              const response = await fetch('/api/restaurant/default');
              if (response.ok) {
                const defaultRestaurant = await response.json();
                window.location.href = `/menu/${defaultRestaurant.restaurantId}?liff=true&from=liff-fallback`;
              } else {
                setError('no_restaurant');
                setIsLoading(false);
              }
            }
          } else {
            console.log('‚ùå No session, redirecting to signin');
            const signinUrl = restaurantId 
              ? `/auth/line-signin?restaurant=${restaurantId}&required=true`
              : '/auth/line-signin?required=true';
            window.location.href = signinUrl;
          }
        } catch (sessionError) {
          console.error('‚ùå Session check failed:', sessionError);
          const restaurantId = searchParams.get('restaurant');
          const signinUrl = restaurantId 
            ? `/auth/line-signin?restaurant=${restaurantId}&required=true`
            : '/auth/line-signin?required=true';
          window.location.href = signinUrl;
        }
      }
    };

    handleFallbackRedirect();
  }, [liffReady, isLoading, searchParams]);

  // Loading State - ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î loading ‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏±‡∏ô
  if (isLoading && !error) {
    return (
      <Box sx={{ 
        minHeight: '100vh', 
        background: '#ffffff',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        p: 3
      }}>
        <Box sx={{ textAlign: 'center' }}>
          <CircularProgress 
            sx={{ 
              color: '#10B981',
              mb: 2
            }} 
            size={32}
          />
          <Typography 
            variant="body1" 
            sx={{ 
              color: '#111827',
              fontWeight: 500,
              fontSize: '1rem',
              mb: 0.5
            }}
          >
            {loadingMessage}
          </Typography>
          <Typography 
            variant="body2" 
            sx={{ 
              color: '#6B7280',
              fontSize: '0.875rem'
            }}
          >
            ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...
          </Typography>
        </Box>
      </Box>
    );
  }

  // Error State
  if (error) {
    const getErrorInfo = (errorType: string) => {
      switch (errorType) {
        case 'connection_timeout':
          return {
            title: '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤',
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE ‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î',
            suggestion: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
          };
        case 'init_failed':
          return {
            title: '‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß',
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö LINE ‡πÑ‡∏î‡πâ',
            suggestion: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
          };
        case 'sdk_error':
          return {
            title: '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏∞‡∏ö‡∏ö',
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î LINE SDK ‡πÑ‡∏î‡πâ',
            suggestion: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'
          };
        case 'auth_error':
          return {
            title: '‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß',
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ',
            suggestion: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
          };
        case 'no_restaurant':
          return {
            title: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏î‡πâ',
            suggestion: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
          };
        case 'invalid_config':
          return {
            title: '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LIFF ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LIFF ‡πÑ‡∏î‡πâ',
            suggestion: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'
          };
        case 'invalid_liff_id':
          return {
            title: 'ID LIFF ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ID LIFF',
            suggestion: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'
          };
        case 'network_error':
          return {
            title: '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢',
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ',
            suggestion: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
          };
        case 'liff_init_failed':
          return {
            title: '‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô LIFF ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß',
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô LIFF ‡πÑ‡∏î‡πâ',
            suggestion: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
          };
        default:
          return {
            title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ',
            suggestion: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'
          };
      }
    };

    const errorInfo = getErrorInfo(error);

    return (
      <Box sx={{ 
        minHeight: '100vh', 
        background: '#ffffff',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        p: 3
      }}>
        <Card
          sx={{
            maxWidth: 500,
            width: '100%',
            background: 'rgba(255, 255, 255, 0.95)',
            backdropFilter: 'blur(20px) saturate(180%)',
            border: '1px solid rgba(255, 255, 255, 0.18)',
            borderRadius: 4,
            boxShadow: '0 8px 32px rgba(31, 38, 135, 0.15)',
            p: 5,
            textAlign: 'center',
          }}
        >
          <Box sx={{ mb: 3 }}>
            <Box
              sx={{
                width: 80,
                height: 80,
                borderRadius: '50%',
                background: 'linear-gradient(45deg, #ff6b6b, #ee5a24)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                margin: '0 auto',
                mb: 2
              }}
            >
              <Typography variant="h3" sx={{ color: 'white' }}>‚ö†Ô∏è</Typography>
            </Box>
          </Box>
          
          <Typography variant="h5" gutterBottom sx={{ fontWeight: 'bold', color: '#2c3e50' }}>
            {errorInfo?.title || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}
          </Typography>
          
          <Typography variant="body1" sx={{ mb: 2, color: '#34495e' }}>
            {errorInfo?.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ'}
          </Typography>
          
          <Typography variant="body2" sx={{ mb: 4, color: '#7f8c8d' }}>
            {errorInfo?.suggestion || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'}
          </Typography>
          
          <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center' }}>
            <Button
              variant="contained"
              onClick={() => window.location.reload()}
              sx={{
                background: '#10B981',
                color: 'white',
                px: 4,
                py: 1.5,
                borderRadius: 3,
                textTransform: 'none',
                fontWeight: 'bold',
                
              }}
            >
              ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            </Button>
          
          </Box>
        </Card>
      </Box>
    );
  }

  // ‡πÅ‡∏™‡∏î‡∏á loading state
  return (
    <Box sx={{ 
      minHeight: '100vh', 
      background: 'linear-gradient(135deg, #f0f8ff 0%, #e6f3ff 100%)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      p: 3,
      position: 'relative',
      overflow: 'hidden'
    }}>
      {/* Background decoration */}
      <Box
        sx={{
          position: 'absolute',
          top: -50,
          right: -50,
          width: 200,
          height: 200,
          borderRadius: '50%',
          background: 'linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(52, 211, 153, 0.05) 100%)',
          filter: 'blur(40px)',
          animation: 'liquidFloat 6s ease-in-out infinite'
        }}
      />
      <Box
        sx={{
          position: 'absolute',
          bottom: -100,
          left: -100,
          width: 300,
          height: 300,
          borderRadius: '50%',
          background: 'linear-gradient(135deg, rgba(99, 102, 241, 0.1) 0%, rgba(129, 140, 248, 0.05) 100%)',
          filter: 'blur(60px)',
          animation: 'liquidFloat 8s ease-in-out infinite reverse'
        }}
      />

      <Card
        sx={{
          maxWidth: 500,
          width: '100%',
          background: 'rgba(255, 255, 255, 0.25)',
          backdropFilter: 'blur(20px) saturate(180%)',
          border: '1px solid rgba(255, 255, 255, 0.18)',
          borderRadius: 4,
          boxShadow: '0 8px 32px rgba(31, 38, 135, 0.15)',
          p: 5,
          textAlign: 'center',
          position: 'relative',
          overflow: 'hidden',
          animation: 'fadeInUp 0.6s ease-out both'
        }}
      >
        {/* Shimmer effect */}
        <Box
          sx={{
            position: 'absolute',
            top: 0,
            left: '-100%',
            width: '100%',
            height: '100%',
            background: 'linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent)',
            animation: 'shimmer 2s infinite'
          }}
        />

        {/* Loading Animation */}
        <Box
          sx={{
            width: 80,
            height: 80,
            borderRadius: '50%',
            background: 'linear-gradient(135deg, rgba(16, 185, 129, 0.2) 0%, rgba(52, 211, 153, 0.1) 100%)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            margin: '0 auto 24px',
            border: '2px solid rgba(16, 185, 129, 0.2)',
            animation: 'liquidFloat 3s ease-in-out infinite'
          }}
        >
          <CircularProgress 
            size={40} 
            sx={{ 
              color: '#10B981',
              filter: 'drop-shadow(0 2px 8px rgba(16, 185, 129, 0.3))'
            }} 
          />
        </Box>

        {/* Loading Text */}
        <Typography 
          variant="h4" 
          sx={{ 
            fontWeight: 700,
            mb: 2,
            color: 'rgba(0, 0, 0, 0.9)',
            textShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
            '@media (max-width: 600px)': {
              fontSize: '1.5rem'
            }
          }}
        >
          ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...
        </Typography>

        {/* Loading Message */}
        <Typography 
          sx={{ 
            color: 'rgba(0, 0, 0, 0.7)',
            mb: 2,
            lineHeight: 1.6,
            fontSize: '1.1rem',
            '@media (max-width: 600px)': {
              fontSize: '1rem'
            }
          }}
        >
          ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£<br />
          ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...
        </Typography>

        {/* Help Text */}
        <Typography 
          sx={{ 
            color: 'rgba(0, 0, 0, 0.5)',
            fontSize: '0.9rem',
            fontStyle: 'italic'
          }}
        >
          ‡∏´‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
        </Typography>
      </Card>
    </Box>
  );
}

// Loading fallback component - ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢
function LiffLandingLoading() {
  return (
    <Box sx={{ 
      minHeight: '100vh', 
      background: '#ffffff',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      p: 3
    }}>
      <Box sx={{ textAlign: 'center' }}>
        <CircularProgress size={32} sx={{ mb: 2, color: '#10B981' }} />
        <Typography variant="body2" sx={{ color: '#6B7280', fontSize: '0.875rem' }}>
          ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...
        </Typography>
      </Box>
    </Box>
  );
}

// Main component ‡∏ó‡∏µ‡πà‡∏´‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢ Suspense
export default function LiffLandingPage() {
  return (
    <Suspense fallback={<LiffLandingLoading />}>
      <LiffLandingContent />
    </Suspense>
  );
} 