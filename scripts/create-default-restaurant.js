#!/usr/bin/env node

/**
 * Create Default Restaurant for Production
 * 
 * This script creates a default restaurant and owner account
 * for production environment to fix authentication issues.
 */

const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcryptjs')

async function main() {
  const prisma = new PrismaClient()
  
  try {
    console.log('üöÄ Creating Default Restaurant for Production...\n')
    
    // Check if default restaurant already exists
    const existingRestaurant = await prisma.restaurant.findFirst({
      where: { status: 'ACTIVE' }
    })
    
    if (existingRestaurant) {
      console.log(`‚úÖ Default restaurant already exists: ${existingRestaurant.name} (ID: ${existingRestaurant.id})`)
      return
    }
    
    // Check if owner user exists
    let owner = await prisma.user.findUnique({
      where: { email: 'owner@redpotion.com' }
    })
    
    if (!owner) {
      console.log('üë§ Creating default owner account...')
      const hashedPassword = await bcrypt.hash('password123', 12)
      
      owner = await prisma.user.create({
        data: {
          email: 'owner@redpotion.com',
          password: hashedPassword,
          name: 'Restaurant Owner',
          role: 'RESTAURANT_OWNER',
          emailVerified: new Date()
        }
      })
      console.log(`‚úÖ Owner created: ${owner.email}`)
    } else {
      console.log(`‚úÖ Owner already exists: ${owner.email}`)
    }
    
    // Create default restaurant with all required fields
    console.log('üè™ Creating default restaurant...')
    const restaurant = await prisma.restaurant.create({
      data: {
        name: 'Red Potion Restaurant',
        description: '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö Red Potion',
        phone: '02-123-4567',
        address: 'Bangkok, Thailand',
        status: 'ACTIVE',
        liffId: '2007609360-3Z0L8Ekg', // Default LIFF ID
        ownerId: owner.id,
        // Default operating hours
        openTime: '09:00',
        closeTime: '22:00',
        isOpen: true,
        // Order settings
        minOrderAmount: 100,
        deliveryFee: 25,
        deliveryRadius: 5,
        // Payment settings - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡πÅ‡∏•‡∏∞ PromptPay
        acceptCash: true,
        acceptTransfer: true,
        promptpayId: '0862061354', // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        promptpayType: 'PHONE_NUMBER',
        promptpayName: 'Red Potion Restaurant',
        // Location (Bangkok coordinates)
        latitude: 13.7563,
        longitude: 100.5018,
        locationName: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
        // Business information
        businessType: '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
        email: 'info@redpotion.com'
      }
    })
    
    console.log(`‚úÖ Restaurant created: ${restaurant.name} (ID: ${restaurant.id})`)
    
    // Create sample menu categories
    console.log('üìã Creating sample menu categories...')
    const categories = await Promise.all([
      prisma.category.create({
        data: {
          name: '‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥',
          description: '‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏≠‡∏á',
          restaurantId: restaurant.id,
          sortOrder: 1,
          isActive: true
        }
      }),
      prisma.category.create({
        data: {
          name: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î',
          description: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥',
          restaurantId: restaurant.id,
          sortOrder: 2,
          isActive: true
        }
      }),
      prisma.category.create({
        data: {
          name: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°',
          description: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà',
          restaurantId: restaurant.id,
          sortOrder: 3,
          isActive: true
        }
      })
    ])
    
    console.log(`‚úÖ Created ${categories.length} categories`)
    
    // Create sample menu items
    console.log('üçΩÔ∏è Creating sample menu items...')
    const menuItems = await Promise.all([
      // ‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
      prisma.menuItem.create({
        data: {
          name: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á',
          description: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î‡πÉ‡∏™‡πà‡πÑ‡∏Ç‡πà ‡∏´‡∏≠‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏≠‡∏£‡πà‡∏≠‡∏¢',
          price: 120,
          originalPrice: 150,
          categoryId: categories[0].id,
          restaurantId: restaurant.id,
          isAvailable: true,
          sortOrder: 1,
          calories: 450,
          tags: ['‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', '‡∏Å‡∏∏‡πâ‡∏á', '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î']
        }
      }),
      prisma.menuItem.create({
        data: {
          name: '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î',
          description: '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡πÅ‡∏ó‡πâ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏ï‡πâ‡∏ô‡∏ï‡∏≥‡∏£‡∏±‡∏ö ‡πÉ‡∏™‡πà‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà',
          price: 150,
          categoryId: categories[0].id,
          restaurantId: restaurant.id,
          isAvailable: true,
          sortOrder: 2,
          calories: 380,
          tags: ['‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢', '‡∏Å‡∏∏‡πâ‡∏á']
        }
      }),
      // ‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î
      prisma.menuItem.create({
        data: {
          name: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏´‡∏°‡∏π',
          description: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö‡∏´‡∏≠‡∏°‡∏Å‡∏£‡∏∏‡πà‡∏ô ‡πÉ‡∏™‡πà‡πÑ‡∏Ç‡πà‡∏î‡∏≤‡∏ß',
          price: 90,
          categoryId: categories[1].id,
          restaurantId: restaurant.id,
          isAvailable: true,
          sortOrder: 1,
          calories: 420,
          tags: ['‡∏´‡∏°‡∏π', '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î']
        }
      }),
      prisma.menuItem.create({
        data: {
          name: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡πÑ‡∏Å‡πà',
          description: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡πÑ‡∏Å‡πà‡∏ô‡∏∏‡πà‡∏° ‡πÉ‡∏™‡πà‡∏ú‡∏±‡∏Å‡∏™‡∏î‡∏Å‡∏£‡∏≠‡∏ö',
          price: 85,
          categoryId: categories[1].id,
          restaurantId: restaurant.id,
          isAvailable: true,
          sortOrder: 2,
          calories: 390,
          tags: ['‡πÑ‡∏Å‡πà', '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î']
        }
      }),
      // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°
      prisma.menuItem.create({
        data: {
          name: '‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏¢‡πá‡∏ô',
          description: '‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏ó‡πâ‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏±‡∏ô ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô',
          price: 35,
          categoryId: categories[2].id,
          restaurantId: restaurant.id,
          isAvailable: true,
          sortOrder: 1,
          calories: 180,
          tags: ['‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', '‡∏ä‡∏≤', '‡πÄ‡∏¢‡πá‡∏ô']
        }
      }),
      prisma.menuItem.create({
        data: {
          name: '‡∏ô‡πâ‡∏≥‡∏™‡πâ‡∏°‡∏Ñ‡∏±‡πâ‡∏ô‡∏™‡∏î',
          description: '‡∏ô‡πâ‡∏≥‡∏™‡πâ‡∏°‡∏™‡∏î‡∏Ñ‡∏±‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•',
          price: 45,
          categoryId: categories[2].id,
          restaurantId: restaurant.id,
          isAvailable: true,
          sortOrder: 2,
          calories: 120,
          tags: ['‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', '‡∏™‡πâ‡∏°', '‡∏™‡∏î']
        }
      })
    ])
    
    console.log(`‚úÖ Created ${menuItems.length} menu items`)
    
    // Create sample addons for some menu items
    console.log('üéØ Creating sample addons...')
    const addons = await Promise.all([
      // Addons ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á
      prisma.addon.create({
        data: {
          name: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏∏‡πâ‡∏á',
          price: 30,
          menuItemId: menuItems[0].id,
          isAvailable: true,
          sortOrder: 1
        }
      }),
      prisma.addon.create({
        data: {
          name: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏Ç‡πà‡∏î‡∏≤‡∏ß',
          price: 15,
          menuItemId: menuItems[0].id,
          isAvailable: true,
          sortOrder: 2
        }
      }),
      // Addons ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°
      prisma.addon.create({
        data: {
          name: '‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©',
          price: 5,
          menuItemId: menuItems[4].id,
          isAvailable: true,
          sortOrder: 1
        }
      }),
      prisma.addon.create({
        data: {
          name: '‡∏´‡∏ß‡∏≤‡∏ô‡∏ô‡πâ‡∏≠‡∏¢',
          price: 0,
          menuItemId: menuItems[4].id,
          isAvailable: true,
          sortOrder: 2
        }
      })
    ])
    
    console.log(`‚úÖ Created ${addons.length} addons`)
    
    console.log('\nüéâ Default restaurant setup completed!')
    console.log('\nüìã Summary:')
    console.log(`   Restaurant: ${restaurant.name}`)
    console.log(`   Owner: ${owner.email}`)
    console.log(`   Password: password123`)
    console.log(`   LIFF ID: ${restaurant.liffId}`)
    console.log(`   Status: ${restaurant.status}`)
    console.log(`   Categories: ${categories.length}`)
    console.log(`   Menu Items: ${menuItems.length}`)
    console.log(`   Addons: ${addons.length}`)
    
    console.log('\nüí≥ Payment Settings:')
    console.log(`   Cash: ${restaurant.acceptCash ? '‡∏£‡∏±‡∏ö' : '‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö'}`)
    console.log(`   Transfer: ${restaurant.acceptTransfer ? '‡∏£‡∏±‡∏ö' : '‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö'}`)
    console.log(`   PromptPay: ${restaurant.promptpayId} (${restaurant.promptpayType})`)
    console.log(`   Account Name: ${restaurant.promptpayName}`)
    
    console.log('\nüöÄ Operation Settings:')
    console.log(`   Min Order: ‡∏ø${restaurant.minOrderAmount}`)
    console.log(`   Delivery Fee: ‡∏ø${restaurant.deliveryFee}`)
    console.log(`   Delivery Radius: ${restaurant.deliveryRadius} km`)
    console.log(`   Operating Hours: ${restaurant.openTime} - ${restaurant.closeTime}`)
    
    console.log('\nüí° Next steps:')
    console.log('   1. Deploy this to production')
    console.log('   2. Test login at: https://red.theredpotion.com/auth/signin')
    console.log('   3. Check restaurant management at: https://red.theredpotion.com/restaurant')
    console.log('   4. Test menu at: https://red.theredpotion.com/menu/' + restaurant.id)
    console.log('   5. Test LIFF at: https://red.theredpotion.com/liff?restaurant=' + restaurant.id)
    
  } catch (error) {
    console.error('‚ùå Error creating default restaurant:', error)
    if (error.code === 'P2002') {
      console.error('   This might be a unique constraint violation.')
      console.error('   Try running the script again or check existing data.')
    }
  } finally {
    await prisma.$disconnect()
  }
}

main()