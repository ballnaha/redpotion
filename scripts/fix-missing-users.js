const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkMissingUsers() {
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE users ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤...\n');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ lineUserId
    const lineUsers = await prisma.user.findMany({
      where: {
        lineUserId: {
          not: null
        }
      },
      select: {
        id: true,
        name: true,
        lineUserId: true,
        email: true,
        role: true,
        createdAt: true,
        updatedAt: true
      }
    });

    console.log(`üìä ‡∏û‡∏ö LINE users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${lineUsers.length} ‡∏Ñ‡∏ô\n`);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ users
    lineUsers.forEach((user, index) => {
      console.log(`${index + 1}. ${user.name || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'}`);
      console.log(`   - ID: ${user.id}`);
      console.log(`   - LINE User ID: ${user.lineUserId}`);
      console.log(`   - Email: ${user.email}`);
      console.log(`   - Role: ${user.role}`);
      console.log(`   - Created: ${user.createdAt}`);
      console.log(`   - Updated: ${user.updatedAt}`);
      console.log('');
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö users ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    const problemUsers = lineUsers.filter(user => 
      !user.name || 
      !user.email || 
      user.email.includes('line_') === false
    );

    if (problemUsers.length > 0) {
      console.log(`‚ö†Ô∏è  ‡∏û‡∏ö users ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ${problemUsers.length} ‡∏Ñ‡∏ô`);
      problemUsers.forEach(user => {
        console.log(`   - ${user.lineUserId}: ${user.name || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'}`);
      });
    } else {
      console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô users');
    }

    console.log('\nüìã ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:');
    console.log(`   - Total LINE users: ${lineUsers.length}`);
    console.log(`   - Users with problems: ${problemUsers.length}`);
    console.log(`   - CUSTOMER role: ${lineUsers.filter(u => u.role === 'CUSTOMER').length}`);
    console.log(`   - USER role: ${lineUsers.filter(u => u.role === 'USER').length}`);
    console.log(`   - RESTAURANT_OWNER role: ${lineUsers.filter(u => u.role === 'RESTAURANT_OWNER').length}`);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await prisma.$disconnect();
  }
}

async function recreateUser(lineUserId, userData = {}) {
  try {
    console.log(`üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE ID: ${lineUserId}`);

    const newUser = await prisma.user.create({
      data: {
        lineUserId: lineUserId,
        name: userData.name || `LINE User ${lineUserId.slice(-6)}`,
        email: userData.email || `line_${lineUserId}@line.user`,
        role: userData.role || 'USER',
        image: userData.image || null,
        loginPlatform: userData.loginPlatform || 'BROWSER'
      }
    });

    console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', newUser);
    return newUser;

  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ:', error);
    return null;
  }
}

async function cleanupOrphanedSessions() {
  try {
    console.log('üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î orphaned sessions...');
    
    // Note: ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö HTTP-only cookies ‡∏à‡∏≤‡∏Å‡∏ù‡∏±‡πà‡∏á server ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    // ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ user ‡πÑ‡∏î‡πâ
    
    console.log(`
üìù ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î cookies:

1. ‡πÄ‡∏õ‡∏¥‡∏î browser developer tools (F12)
2. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà tab Application/Storage
3. ‡∏•‡∏ö cookies ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:
   - line-session-token
   - line-session-backup
   - line-session
   - LIFF_STORE:*

‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ JavaScript command ‡πÉ‡∏ô console:
document.cookie.split(';').forEach(cookie => {
  const name = cookie.split('=')[0].trim();
  if (name.includes('line-session') || name.includes('LIFF_STORE')) {
    document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/';
  }
});
    `);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î:', error);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ functions
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  switch (command) {
    case 'check':
      await checkMissingUsers();
      break;
    case 'recreate':
      const lineUserId = args[1];
      if (!lineUserId) {
        console.log('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ LINE User ID');
        console.log('Usage: node scripts/fix-missing-users.js recreate <LINE_USER_ID>');
        return;
      }
      await recreateUser(lineUserId);
      break;
    case 'cleanup':
      await cleanupOrphanedSessions();
      break;
    default:
      console.log(`
üõ†Ô∏è  LINE User Management Script

Commands:
  check     - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE users ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  recreate  - ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE User ID ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
  cleanup   - ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î cookies

Usage:
  node scripts/fix-missing-users.js check
  node scripts/fix-missing-users.js recreate <LINE_USER_ID>
  node scripts/fix-missing-users.js cleanup
      `);
  }
}

main(); 