const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testMobileLogin() {
  console.log('üß™ Testing Mobile Login Logic...\n');

  try {
    // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å iOS
    console.log('üì± Test 1: Creating new iOS user');
    const testUserId = `TEST_IOS_${Date.now()}`;
    
    const iosUser = await prisma.user.create({
      data: {
        lineUserId: testUserId,
        name: 'Test iOS User',
        email: `line_${testUserId}@line.user`,
        role: 'USER', // ‡πÉ‡∏ä‡πâ USER ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ Prisma client ‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
        loginPlatform: 'IOS'
      }
    });

    console.log('‚úÖ iOS User created:', {
      id: iosUser.id,
      name: iosUser.name,
      role: iosUser.role,
      platform: iosUser.loginPlatform
    });

    // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Android  
    console.log('\nüì± Test 2: Creating new Android user');
    const testUserIdAndroid = `TEST_ANDROID_${Date.now()}`;
    
    const androidUser = await prisma.user.create({
      data: {
        lineUserId: testUserIdAndroid,
        name: 'Test Android User',
        email: `line_${testUserIdAndroid}@line.user`,
        role: 'USER', // ‡πÉ‡∏ä‡πâ USER ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ Prisma client ‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
        loginPlatform: 'ANDROID'
      }
    });

    console.log('‚úÖ Android User created:', {
      id: androidUser.id,
      name: androidUser.name,
      role: androidUser.role,
      platform: androidUser.loginPlatform
    });

    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Browser
    console.log('\nüåê Test 3: Creating new Browser user');
    const testUserIdBrowser = `TEST_BROWSER_${Date.now()}`;
    
    const browserUser = await prisma.user.create({
      data: {
        lineUserId: testUserIdBrowser,
        name: 'Test Browser User',
        email: `line_${testUserIdBrowser}@line.user`,
        role: 'USER', // ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô USER ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Browser
        loginPlatform: 'BROWSER'
      }
    });

    console.log('‚úÖ Browser User created:', {
      id: browserUser.id,
      name: browserUser.name,
      role: browserUser.role,
      platform: browserUser.loginPlatform
    });

    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Restaurant ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    console.log('\nüè™ Test 4: Checking available restaurants');
    const restaurants = await prisma.restaurant.findMany({
      where: { status: 'ACTIVE' },
      select: {
        id: true,
        name: true,
        status: true
      },
      take: 3
    });

    console.log('üìã Available restaurants:');
    restaurants.forEach((restaurant, index) => {
      console.log(`  ${index + 1}. ${restaurant.name} (${restaurant.id})`);
    });

    // 5. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    console.log('\nüìä Test Summary:');
    console.log('‚úÖ iOS user should have role USER and skip role selection');
    console.log('‚úÖ Android user should have role USER and skip role selection'); 
    console.log('‚ö†Ô∏è Browser user should have role USER and go to role selection');
    
    // 6. ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î test data
    console.log('\nüóëÔ∏è Cleaning up test data...');
    await prisma.user.deleteMany({
      where: {
        lineUserId: {
          in: [testUserId, testUserIdAndroid, testUserIdBrowser]
        }
      }
    });
    console.log('‚úÖ Test data cleaned up');

    console.log('\nüéØ Next Steps:');
    console.log('1. Test with real LINE App on iOS/Android');
    console.log('2. Verify redirect goes directly to menu (not role selection)');
    console.log('3. Test URL: http://localhost:3000/debug-line-real-user');
    console.log('4. Check console logs for platform detection');

  } catch (error) {
    console.error('‚ùå Test failed:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
if (require.main === module) {
  testMobileLogin().catch(console.error);
}

module.exports = { testMobileLogin }; 