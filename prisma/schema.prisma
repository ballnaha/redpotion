generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  lineUserId    String?         @unique
  role          UserRole        @default(CUSTOMER)
  loginPlatform LoginPlatform?  // แพลตฟอร์มที่ login เข้ามา
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  restaurant    Restaurant?
  sessions      Session[]
  profile       CustomerProfile?
  lineUserProfile LineUserProfile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id             String           @id @default(cuid())
  name           String
  description    String?
  address        String
  phone          String
  email          String?
  imageUrl       String?
  liffId         String?
  status         RestaurantStatus @default(PENDING)
  latitude       Float?
  longitude      Float?
  locationName   String?
  businessType   String?
  taxId          String?
  bankAccount    String?
  bankName       String?
  openTime       String?
  closeTime      String?
  isOpen         Boolean          @default(true)
  minOrderAmount Float?           @default(0)
  deliveryFee    Float?           @default(0)
  deliveryRadius Float?           @default(5)
  // Payment Settings
  acceptCash     Boolean          @default(true)
  acceptTransfer Boolean          @default(false)
  promptpayId    String?          // เลขพร้อมเพย์ (เบอร์โทรหรือบัตรประชาชน)
  promptpayType  PromptPayType?   // ประเภทพร้อมเพย์
  promptpayName  String?          // ชื่อบัญชีพร้อมเพย์
  // LIFF & Subscription Settings
  liffExpiresAt  DateTime?        // วันที่หมดอายุ LIFF
  subscriptionType SubscriptionType? @default(FREE) // ประเภทการสมัครสมาชิก
  subscriptionStartDate DateTime?  // วันที่เริ่มสมัครสมาชิก
  subscriptionEndDate DateTime?    // วันที่หมดอายุสมาชิก
  isLiffActive   Boolean          @default(true)   // สถานะการใช้งาน LIFF
  liffSettings   Json?            // การตั้งค่า LIFF เพิ่มเติม
  // Last Extension Info
  lastExtensionDate DateTime?     // วันที่ต่ออายุครั้งล่าสุด
  lastExtensionType SubscriptionType? // ประเภทการต่ออายุครั้งล่าสุด
  lastExtensionAmount Int?        // จำนวนเดือน/ปีที่ต่อครั้งล่าสุด
  lastExtensionBy   String?       // ผู้ที่ทำการต่ออายุครั้งล่าสุด
  ownerId        String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  categories     Category[]
  documents      Document[]
  galleries      Gallery[]
  menuItems      MenuItem[]
  orders         Order[]
  owner          User             @relation(fields: [ownerId], references: [id])
  lineUserProfiles LineUserProfile[]
}

model Category {
  id           String     @id @default(cuid())
  name         String
  description  String?
  imageUrl     String?
  sortOrder    Int        @default(0)
  isActive     Boolean    @default(true)
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menuItems    MenuItem[]

  @@unique([restaurantId, name])
}

model MenuItem {
  id            String      @id @default(cuid())
  name          String
  description   String?
  price         Float
  originalPrice Float?
  imageUrl      String?
  isAvailable   Boolean     @default(true)
  sortOrder     Int         @default(0)
  calories      Int?
  tags          String[]    @default([])
  restaurantId  String
  categoryId    String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  addons        Addon[]
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
}

model Addon {
  id              String           @id @default(cuid())
  name            String
  price           Float
  isAvailable     Boolean          @default(true)
  sortOrder       Int              @default(0)
  menuItemId      String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  menuItem        MenuItem         @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  orderItemAddons OrderItemAddon[]
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  customerName    String
  customerPhone   String
  customerEmail   String?
  lineUserId      String?     // LINE User ID สำหรับระบุลูกค้า
  deliveryAddress String?
  deliveryNotes   String?
  subtotal        Float
  deliveryFee     Float       @default(0)
  tax             Float       @default(0)
  discount        Float       @default(0)    // จำนวนเงินส่วนลด
  promoCode       String?                    // โค้ดส่วนลด
  total           Float
  paymentMethod   String?
  isPaid          Boolean     @default(false)
  paidAt          DateTime?
  estimatedTime   Int?
  confirmedAt     DateTime?
  readyAt         DateTime?
  deliveredAt     DateTime?
  restaurantId    String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  restaurant      Restaurant  @relation(fields: [restaurantId], references: [id])
  items           OrderItem[]
  paymentSlips    PaymentSlip[]
}

model OrderItem {
  id         String           @id @default(cuid())
  quantity   Int
  price      Float
  notes      String?
  orderId    String
  menuItemId String
  createdAt  DateTime         @default(now())
  menuItem   MenuItem         @relation(fields: [menuItemId], references: [id])
  order      Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  addons     OrderItemAddon[]
}

model OrderItemAddon {
  id          String    @id @default(cuid())
  quantity    Int       @default(1)
  price       Float
  orderItemId String
  addonId     String
  createdAt   DateTime  @default(now())
  addon       Addon     @relation(fields: [addonId], references: [id])
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@unique([orderItemId, addonId])
}

model PaymentSlip {
  id                String          @id @default(cuid())
  orderId           String
  slipImageUrl      String
  transferAmount    Float
  transferDate      DateTime
  transferReference String?
  accountName       String
  status            PaymentSlipStatus @default(PENDING)
  submittedAt       DateTime        @default(now())
  approvedAt        DateTime?
  rejectedAt        DateTime?
  adminNotes        String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  order             Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Document {
  id           String       @id @default(cuid())
  fileName     String
  fileUrl      String
  fileSize     Int
  mimeType     String
  documentType DocumentType @default(OTHER)
  description  String?
  restaurantId String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Gallery {
  id           String     @id @default(cuid())
  title        String?
  description  String?
  imageUrl     String
  isActive     Boolean    @default(true)
  sortOrder    Int        @default(0)
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model CustomerProfile {
  id                String            @id @default(cuid())
  userId            String            @unique
  firstName         String?           // ชื่อจริง
  lastName          String?           // นามสกุลจริง
  phone             String?
  riderNote         String?           // ระบุถึง rider
  selectedAddressType AddressType?    // เลือกใช้ที่อยู่บ้านหรือที่ทำงาน
  currentLatitude   Float?            // ตำแหน่งปัจจุบัน lat
  currentLongitude  Float?            // ตำแหน่งปัจจุบัน lng
  currentAddress    String?           // ที่อยู่ปัจจุบัน
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  addresses         DeliveryAddress[]
}

model DeliveryAddress {
  id                String          @id @default(cuid())
  label             String          // บ้าน, ที่ทำงาน
  address           String
  latitude          Float?          // พิกัดของที่อยู่นี้
  longitude         Float?          // พิกัดของที่อยู่นี้
  locationAddress   String?         // ที่อยู่จาก location
  isDefault         Boolean         @default(false)
  type              AddressType     @default(HOME)
  customerProfileId String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  customerProfile   CustomerProfile @relation(fields: [customerProfileId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  CUSTOMER
  RESTAURANT_OWNER
  ADMIN
}

enum RestaurantStatus {
  PENDING
  ACTIVE
  SUSPENDED
  CLOSED
  REJECTED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum DocumentType {
  OTHER
}

enum AddressType {
  HOME
  WORK
}

enum PromptPayType {
  PHONE_NUMBER
  CITIZEN_ID
}

enum LoginPlatform {
  IOS
  ANDROID
  BROWSER
}

enum PaymentSlipStatus {
  PENDING
  APPROVED
  REJECTED
}

model PricingPlan {
  id              String           @id @default(cuid())
  name            String           // ชื่อแผน เช่น "แผนรายเดือน", "แผนรายปี"
  description     String?          // คำอธิบายแผน
  planType        SubscriptionType // ประเภทแผน MONTHLY, YEARLY
  duration        Int              // ระยะเวลา (เดือน สำหรับ MONTHLY = 1, YEARLY = 12)
  originalPrice   Float            // ราคาเต็ม
  discountPercent Float            @default(0) // เปอร์เซ็นต์ส่วนลด
  finalPrice      Float            // ราคาหลังหักส่วนลด
  isActive        Boolean          @default(true) // สถานะการใช้งาน
  sortOrder       Int              @default(0) // ลำดับการแสดง
  features        String[]         @default([]) // ฟีเจอร์ที่ได้รับ
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdBy       String?          // ผู้สร้าง
  updatedBy       String?          // ผู้แก้ไขล่าสุด
}

enum SubscriptionType {
  FREE        // ฟรี (จำกัดฟีเจอร์)
  MONTHLY     // รายเดือน
  YEARLY      // รายปี
  LIFETIME    // ตลอดชีพ
  TRIAL       // ทดลองใช้
}

// LINE Webhook และ User Profile Models
model LineWebhookEvent {
  id                String                 @id @default(cuid())
  eventType         LineEventType         // ประเภท event (message, follow, unfollow, etc.)
  lineUserId        String                // LINE User ID ของผู้ส่ง
  replyToken        String?               // Reply token สำหรับตอบกลับ
  messageType       LineMessageType?      // ประเภทข้อความ (text, image, etc.)
  messageText       String?               // ข้อความที่ส่งมา (สำหรับ text message)
  messageId         String?               // ID ของข้อความ
  timestamp         DateTime              // เวลาที่เกิด event
  rawData           Json                  // ข้อมูล raw จาก LINE webhook
  isProcessed       Boolean               @default(false) // สถานะการประมวลผล
  processedAt       DateTime?             // เวลาที่ประมวลผลเสร็จ
  errorMessage      String?               // ข้อความ error หากมี
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  lineUserProfile   LineUserProfile?      @relation(fields: [lineUserId], references: [lineUserId])
}

model LineUserProfile {
  id              String              @id @default(cuid())
  lineUserId      String              @unique // LINE User ID
  displayName     String?             // ชื่อที่แสดงใน LINE
  pictureUrl      String?             // รูปโปรไฟล์
  statusMessage   String?             // สถานะข้อความ
  language        String?             // ภาษาที่ใช้
  isFollowing     Boolean             @default(true) // สถานะการติดตาม OA
  followedAt      DateTime?           // วันที่เริ่มติดตาม
  unfollowedAt    DateTime?           // วันที่เลิกติดตาม
  lastActiveAt    DateTime?           // ครั้งล่าสุดที่มีกิจกรรม
  restaurantId    String?             // ร้านอาหารที่เกี่ยวข้อง (ถ้ามี)
  userId          String?             @unique // User ID ในระบบ (ถ้าได้ทำการเชื่อมต่อ)
  metadata        Json?               // ข้อมูลเพิ่มเติม
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  restaurant      Restaurant?         @relation(fields: [restaurantId], references: [id])
  user            User?               @relation(fields: [userId], references: [id])
  webhookEvents   LineWebhookEvent[]
}

// เพิ่ม relation ใน Restaurant และ User models
// Restaurant จะมี LineUserProfile หลายรายการ
// User จะมี LineUserProfile เดียว

enum LineEventType {
  MESSAGE         // ข้อความ
  FOLLOW          // เริ่มติดตาม
  UNFOLLOW        // เลิกติดตาม
  JOIN            // เข้าร่วมกลุ่ม
  LEAVE           // ออกจากกลุ่ม
  POSTBACK        // Postback event
  BEACON          // Beacon event
  ACCOUNT_LINK    // Account link
  THINGS          // LINE Things
  OTHER           // อื่นๆ
}

enum LineMessageType {
  TEXT            // ข้อความ
  IMAGE           // รูปภาพ
  VIDEO           // วิดีโอ
  AUDIO           // เสียง
  FILE            // ไฟล์
  LOCATION        // ตำแหน่ง
  STICKER         // สติกเกอร์
  IMAGEMAP        // Image map
  TEMPLATE        // Template message
  FLEX            // Flex message
  OTHER           // อื่นๆ
}
