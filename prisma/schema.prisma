generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole    @default(USER)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  restaurant    Restaurant?
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id             String           @id @default(cuid())
  name           String
  description    String?
  address        String
  phone          String
  email          String?
  imageUrl       String?
  status         RestaurantStatus @default(PENDING)
  latitude       Float?
  longitude      Float?
  locationName   String?
  businessType   String?
  taxId          String?
  bankAccount    String?
  bankName       String?
  openTime       String?
  closeTime      String?
  isOpen         Boolean          @default(true)
  minOrderAmount Float?           @default(0)
  deliveryFee    Float?           @default(0)
  deliveryRadius Float?           @default(5)
  ownerId        String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  categories     Category[]
  documents      Document[]
  galleries      Gallery[]
  menuItems      MenuItem[]
  orders         Order[]
  owner          User             @relation(fields: [ownerId], references: [id])
}

model Category {
  id           String     @id @default(cuid())
  name         String
  description  String?
  imageUrl     String?
  sortOrder    Int        @default(0)
  isActive     Boolean    @default(true)
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menuItems    MenuItem[]

  @@unique([restaurantId, name])
}

model MenuItem {
  id            String      @id @default(cuid())
  name          String
  description   String?
  price         Float
  originalPrice Float?
  imageUrl      String?
  isAvailable   Boolean     @default(true)
  sortOrder     Int         @default(0)
  calories      Int?
  restaurantId  String
  categoryId    String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  addons        Addon[]
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
}

model Addon {
  id              String           @id @default(cuid())
  name            String
  price           Float
  isAvailable     Boolean          @default(true)
  sortOrder       Int              @default(0)
  menuItemId      String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  menuItem        MenuItem         @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  orderItemAddons OrderItemAddon[]
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  customerName    String
  customerPhone   String
  customerEmail   String?
  deliveryAddress String?
  deliveryNotes   String?
  subtotal        Float
  deliveryFee     Float       @default(0)
  tax             Float       @default(0)
  total           Float
  paymentMethod   String?
  isPaid          Boolean     @default(false)
  paidAt          DateTime?
  estimatedTime   Int?
  confirmedAt     DateTime?
  readyAt         DateTime?
  deliveredAt     DateTime?
  restaurantId    String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  restaurant      Restaurant  @relation(fields: [restaurantId], references: [id])
  items           OrderItem[]
}

model OrderItem {
  id         String           @id @default(cuid())
  quantity   Int
  price      Float
  notes      String?
  orderId    String
  menuItemId String
  createdAt  DateTime         @default(now())
  menuItem   MenuItem         @relation(fields: [menuItemId], references: [id])
  order      Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  addons     OrderItemAddon[]
}

model OrderItemAddon {
  id          String    @id @default(cuid())
  quantity    Int       @default(1)
  price       Float
  orderItemId String
  addonId     String
  createdAt   DateTime  @default(now())
  addon       Addon     @relation(fields: [addonId], references: [id])
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@unique([orderItemId, addonId])
}

model Document {
  id           String       @id @default(cuid())
  fileName     String
  fileUrl      String
  fileSize     Int
  mimeType     String
  documentType DocumentType @default(OTHER)
  description  String?
  restaurantId String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Gallery {
  id           String     @id @default(cuid())
  title        String?
  description  String?
  imageUrl     String
  isActive     Boolean    @default(true)
  sortOrder    Int        @default(0)
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  RESTAURANT_OWNER
  ADMIN
}

enum RestaurantStatus {
  PENDING
  ACTIVE
  SUSPENDED
  CLOSED
  REJECTED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum DocumentType {
  OTHER
}
