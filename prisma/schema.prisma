// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // สำหรับ credentials login
  role          UserRole  @default(USER)
  
  accounts   Account[]
  sessions   Session[]
  restaurant Restaurant?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Restaurant System Models
enum UserRole {
  USER
  RESTAURANT_OWNER
  ADMIN
}

enum RestaurantStatus {
  PENDING
  ACTIVE
  SUSPENDED
  CLOSED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

model Restaurant {
  id          String           @id @default(cuid())
  name        String
  description String?
  address     String
  phone       String
  email       String?
  imageUrl    String?
  status      RestaurantStatus @default(PENDING)
  
  // Opening hours
  openTime    String?  // "09:00"
  closeTime   String?  // "22:00"
  isOpen      Boolean  @default(true)
  
  // Settings
  minOrderAmount  Float?    @default(0)
  deliveryFee     Float?    @default(0)
  deliveryRadius  Float?    @default(5) // km
  
  // Relations
  ownerId     String        @unique
  owner       User          @relation(fields: [ownerId], references: [id])
  categories  Category[]
  menuItems   MenuItem[]
  orders      Order[]
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Category {
  id           String     @id @default(cuid())
  name         String
  description  String?
  imageUrl     String?
  sortOrder    Int        @default(0)
  isActive     Boolean    @default(true)
  
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menuItems    MenuItem[]
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  @@unique([restaurantId, name])
}

model MenuItem {
  id           String      @id @default(cuid())
  name         String
  description  String?
  price        Float
  imageUrl     String?
  isAvailable  Boolean     @default(true)
  sortOrder    Int         @default(0)
  
  // Nutritional info (optional)
  calories     Int?
  isVegetarian Boolean     @default(false)
  isSpicy      Boolean     @default(false)
  
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  categoryId   String
  category     Category    @relation(fields: [categoryId], references: [id])
  
  orderItems   OrderItem[]
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Order {
  id             String      @id @default(cuid())
  orderNumber    String      @unique
  status         OrderStatus @default(PENDING)
  
  // Customer info
  customerName   String
  customerPhone  String
  customerEmail  String?
  
  // Delivery info
  deliveryAddress String?
  deliveryNotes   String?
  
  // Order totals
  subtotal       Float
  deliveryFee    Float       @default(0)
  tax            Float       @default(0)
  total          Float
  
  // Payment
  paymentMethod  String?     // "cash", "card", "transfer"
  isPaid         Boolean     @default(false)
  paidAt         DateTime?
  
  // Timing
  estimatedTime  Int?        // minutes
  confirmedAt    DateTime?
  readyAt        DateTime?
  deliveredAt    DateTime?
  
  restaurantId   String
  restaurant     Restaurant  @relation(fields: [restaurantId], references: [id])
  
  items          OrderItem[]
  
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int
  price      Float    // ราคาขณะสั่ง
  notes      String?  // หมายเหตุพิเศษ เช่น "ไม่ใส่ผัก"
  
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  
  createdAt  DateTime @default(now())
}
